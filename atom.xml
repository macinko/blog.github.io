<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赛博空间</title>
  <icon>https://macin.top/img/ast.webp</icon>
  <subtitle>Cyber</subtitle>
  <link href="https://macin.top/atom.xml" rel="self"/>
  
  <link href="https://macin.top/"/>
  <updated>2025-02-28T15:34:31.951Z</updated>
  <id>https://macin.top/</id>
  
  <author>
    <name>马斯克</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>debian/ubuntu最新docker和docker compose安装教程</title>
    <link href="https://macin.top/posts/253563c2/"/>
    <id>https://macin.top/posts/253563c2/</id>
    <published>2025-02-28T15:04:54.000Z</published>
    <updated>2025-02-28T15:34:31.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Docker？"><a href="#什么是-Docker？" class="headerlink" title="什么是 Docker？"></a>什么是 Docker？</h2><p>Docker 是一种容器化技术，可以在服务器上快速搭建容器并在不污染宿主机的情况下运行软件，而不再需要安装配置各种环境。开源 <a href="https://www.docker.com/">Docker 社区</a>致力于改进这类技术，并免费提供给所有用户，使之获益。</p><h2 id="什么是-Docker-Compose？"><a href="#什么是-Docker-Compose？" class="headerlink" title="什么是 Docker Compose？"></a>什么是 Docker Compose？</h2><p>传统模式下运维人员需要运行 <code>docker run</code> 来启动各种容器，一旦容器过多，就无法一次性记住所有的运行参数和命令，这时候我们可以使用 <a href="https://docs.docker.com/compose/">Docker Compose</a> 来解决这个问题。</p><p>Docker Compose 是一个用于在单个主机上定义和运行多个 Docker 容器的工具。它使用 YAML 文件来配置应用程序的服务，然后使用一个命令就可以创建并启动所有服务。使用 Docker Compose 可以大大简化 Docker 容器的管理和部署，特别是对于具有多个互相依赖的容器的复杂应用。</p><h2 id="使用官方源安装-Docker"><a href="#使用官方源安装-Docker" class="headerlink" title="使用官方源安装 Docker"></a>使用官方源安装 Docker</h2><p>以下操作需要在 root 用户下完成，请使用 <code>sudo -i</code> 或 <code>su root</code> 切换到 root 用户进行操作。</p><p>首先，安装一些必要的软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade -y</span><br><span class="line">apt install curl vim wget gnupg dpkg apt-transport-https lsb-release ca-certificates</span><br></pre></td></tr></table></figure><p>然后加入 Docker 的 GPG 公钥和 apt 源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-ce.gpg] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -sc)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure><p>国内机器可以用<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华 TUNA</a> 的国内源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-ce.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian <span class="subst">$(lsb_release -sc)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure><p>然后更新系统后即可安装 Docker CE 和 Docker Compose 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><p>此时可以使用 <code>docker version</code> 命令检查是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@debian ~ <span class="comment"># docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           26.1.4</span><br><span class="line"> API version:       1.45</span><br><span class="line"> Go version:        go1.21.11</span><br><span class="line"> Git commit:        5650f9b</span><br><span class="line"> Built:             Wed Jun  5 11:29:22 2024</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          26.1.4</span><br><span class="line">  API version:      1.45 (minimum version 1.24)</span><br><span class="line">  Go version:       go1.21.11</span><br><span class="line">  Git commit:       de5c9cf</span><br><span class="line">  Built:            Wed Jun  5 11:29:22 2024</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">true</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.33</span><br><span class="line">  GitCommit:        d2d58213f83a351ca8f528a95fbd145f5654e957</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.12</span><br><span class="line">  GitCommit:        v1.1.12-0-g51d5e94</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><p>如果需要某个特定用户可以用 Docker <a href="https://docs.docker.com/engine/security/rootless/">rootless</a> 模式运行 Docker，那么可以把这个用户也加入 docker 组，比如我们把 <code>www-data</code> 用户加进去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install docker-ce-rootless-extras</span><br><span class="line">sudo usermod -aG docker www-data</span><br></pre></td></tr></table></figure><h2 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h2><p>因为我们已经安装了 <code>docker-compose-plugin</code>，所以 Docker 目前已经自带 <code>docker compose</code> 命令，基本上可以替代 <code>docker-compose</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@debian ~ <span class="comment"># docker compose version</span></span><br><span class="line">Docker Compose version v2.27.1</span><br></pre></td></tr></table></figure><p>如果某些镜像或命令不兼容，则我们还可以单独安装 Docker Compose：</p><p>我们可以使用 Docker 官方发布的 <a href="https://github.com/docker/compose">Github</a> 直接安装最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64 &gt; /usr/local/bin/docker-compose</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>此时可以使用 <code>docker-compose version</code> 命令检查是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@debian ~ <span class="comment"># docker-compose version</span></span><br><span class="line">Docker Compose version v2.27.1</span><br></pre></td></tr></table></figure><h2 id="修改-Docker-配置"><a href="#修改-Docker-配置" class="headerlink" title="修改 Docker 配置"></a>修改 Docker 配置</h2><p>以下配置会增加一段自定义内网 IPv6 地址，开启容器的 IPv6 功能，以及限制日志文件大小，防止 Docker 日志塞满硬盘 (泪的教训)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class="line"><span class="string">    &quot;log-opts&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;max-size&quot;: &quot;20m&quot;,</span></span><br><span class="line"><span class="string">        &quot;max-file&quot;: &quot;3&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;ipv6&quot;: true,</span></span><br><span class="line"><span class="string">    &quot;fixed-cidr-v6&quot;: &quot;fd00:dead:beef:c0::/80&quot;,</span></span><br><span class="line"><span class="string">    &quot;experimental&quot;:true,</span></span><br><span class="line"><span class="string">    &quot;ip6tables&quot;:true</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>然后重启 Docker 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">docker</summary>
    
    
    
    <category term="tools" scheme="https://macin.top/categories/tools/"/>
    
    <category term="docker" scheme="https://macin.top/categories/tools/docker/"/>
    
    
    <category term="tools" scheme="https://macin.top/tags/tools/"/>
    
    <category term="docker" scheme="https://macin.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>omv常用命令</title>
    <link href="https://macin.top/posts/f4434849/"/>
    <id>https://macin.top/posts/f4434849/</id>
    <published>2025-02-28T14:54:43.000Z</published>
    <updated>2025-02-28T15:34:31.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ZFS插件"><a href="#ZFS插件" class="headerlink" title="ZFS插件"></a>ZFS插件</h1><p>删除zfs的池&#x2F;数据集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zfs destroy poolname/dataset</span><br></pre></td></tr></table></figure><p>列出所有 ZFS 数据集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zfs list</span><br></pre></td></tr></table></figure><h1 id="使用官方源安装-Docker"><a href="#使用官方源安装-Docker" class="headerlink" title="使用官方源安装 Docker"></a>使用官方源安装 Docker</h1><p>以下操作需要在 root 用户下完成，请使用 <code>sudo -i</code> 或 <code>su root</code> 切换到 root 用户进行操作。</p><p>首先，安装一些必要的软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade -y</span><br><span class="line">apt install curl vim wget gnupg dpkg apt-transport-https lsb-release ca-certificates</span><br></pre></td></tr></table></figure><p>然后加入 Docker 的 GPG 公钥和 apt 源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-ce.gpg] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -sc)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure><p>国内机器可以用<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华 TUNA</a> 的国内源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-ce.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian <span class="subst">$(lsb_release -sc)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure><p>然后更新系统后即可安装 Docker CE 和 Docker Compose 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><p>此时可以使用 <code>docker version</code> 命令检查是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@debian ~ <span class="comment"># docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           26.1.4</span><br><span class="line"> API version:       1.45</span><br><span class="line"> Go version:        go1.21.11</span><br><span class="line"> Git commit:        5650f9b</span><br><span class="line"> Built:             Wed Jun  5 11:29:22 2024</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          26.1.4</span><br><span class="line">  API version:      1.45 (minimum version 1.24)</span><br><span class="line">  Go version:       go1.21.11</span><br><span class="line">  Git commit:       de5c9cf</span><br><span class="line">  Built:            Wed Jun  5 11:29:22 2024</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">true</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.33</span><br><span class="line">  GitCommit:        d2d58213f83a351ca8f528a95fbd145f5654e957</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.12</span><br><span class="line">  GitCommit:        v1.1.12-0-g51d5e94</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><p>如果需要某个特定用户可以用 Docker <a href="https://docs.docker.com/engine/security/rootless/">rootless</a> 模式运行 Docker，那么可以把这个用户也加入 docker 组，比如我们把 <code>www-data</code> 用户加进去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install docker-ce-rootless-extras</span><br><span class="line">sudo usermod -aG docker www-data</span><br></pre></td></tr></table></figure><h1 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h1><p>因为我们已经安装了 <code>docker-compose-plugin</code>，所以 Docker 目前已经自带 <code>docker compose</code> 命令，基本上可以替代 <code>docker-compose</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@debian ~ <span class="comment"># docker compose version</span></span><br><span class="line">Docker Compose version v2.27.1</span><br></pre></td></tr></table></figure><p>如果某些镜像或命令不兼容，则我们还可以单独安装 Docker Compose：</p><p>我们可以使用 Docker 官方发布的 <a href="https://github.com/docker/compose">Github</a> 直接安装最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64 &gt; /usr/local/bin/docker-compose</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>此时可以使用 <code>docker-compose version</code> 命令检查是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@debian ~ <span class="comment"># docker-compose version</span></span><br><span class="line">Docker Compose version v2.27.1</span><br></pre></td></tr></table></figure><h1 id="修改-Docker-配置"><a href="#修改-Docker-配置" class="headerlink" title="修改 Docker 配置"></a>修改 Docker 配置</h1><p>以下配置会增加一段自定义内网 IPv6 地址，开启容器的 IPv6 功能，以及限制日志文件大小，防止 Docker 日志塞满硬盘 (泪的教训)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class="line"><span class="string">    &quot;log-opts&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;max-size&quot;: &quot;20m&quot;,</span></span><br><span class="line"><span class="string">        &quot;max-file&quot;: &quot;3&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;ipv6&quot;: true,</span></span><br><span class="line"><span class="string">    &quot;fixed-cidr-v6&quot;: &quot;fd00:dead:beef:c0::/80&quot;,</span></span><br><span class="line"><span class="string">    &quot;experimental&quot;:true,</span></span><br><span class="line"><span class="string">    &quot;ip6tables&quot;:true</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>然后重启 Docker 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>好了，我们已经安装好了 Docker 和 Docker Compose，然后就可以开始愉快的安装各种软件，限于篇幅，我们不再赘述，今后慢慢介绍安装各种 Docker 软件的方法。</p>]]></content>
    
    
    <summary type="html">omv,docker,nas,os</summary>
    
    
    
    <category term="tools" scheme="https://macin.top/categories/tools/"/>
    
    <category term="docker" scheme="https://macin.top/categories/tools/docker/"/>
    
    <category term="os" scheme="https://macin.top/categories/os/"/>
    
    <category term="omv" scheme="https://macin.top/categories/os/omv/"/>
    
    
    <category term="docker" scheme="https://macin.top/tags/docker/"/>
    
    <category term="os" scheme="https://macin.top/tags/os/"/>
    
    <category term="omv" scheme="https://macin.top/tags/omv/"/>
    
  </entry>
  
  <entry>
    <title>rsync远程拉取推送同步本地和异地服务器文件</title>
    <link href="https://macin.top/posts/9219f72b/"/>
    <id>https://macin.top/posts/9219f72b/</id>
    <published>2025-02-22T14:47:21.000Z</published>
    <updated>2025-02-28T15:34:31.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>rsync 是一个常用的 Linux 应用程序，用于文件同步。</p><p>它可以在本地计算机与远程计算机之间，或者两个本地目录之间同步文件（但不支持两台远程计算机之间的同步）。它也可以当作文件复制工具，替代<code>cp</code>和<code>mv</code>命令。</p><p>它名称里面的<code>r</code>指的是 remote，rsync 其实就是”远程同步”（remote sync）的意思。与其他文件传输工具（如 FTP 或 scp）不同，rsync 的最大特点是会检查发送方和接收方已有的文件，仅传输有变动的部分（默认规则是文件大小或修改时间有变动）。</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>如果本机或者远程计算机没有安装 rsync，可以用下面的命令安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Debian</span></span><br><span class="line">apt update</span><br><span class="line">apt-get install rsync</span><br><span class="line"></span><br><span class="line"><span class="comment"># Red Hat</span></span><br><span class="line">yum install rsync</span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch Linux</span></span><br><span class="line">pacman -S rsync</span><br><span class="line"></span><br><span class="line"><span class="comment"># openwrt/istoreos</span></span><br><span class="line">opkg update</span><br><span class="line">opkg install rsync</span><br><span class="line">opkg install rsyncd</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证安装成功</span></span><br><span class="line">rsync --version</span><br></pre></td></tr></table></figure><p>注意，传输的双方都必须安装 rsync。</p><h2 id="三、基本用法"><a href="#三、基本用法" class="headerlink" title="三、基本用法"></a>三、基本用法</h2><h3 id="3-1-r-参数"><a href="#3-1-r-参数" class="headerlink" title="3.1 -r 参数"></a>3.1 <code>-r</code> 参数</h3><p>本机使用 rsync 命令时，可以作为<code>cp</code>和<code>mv</code>命令的替代方法，将源目录同步到目标目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -r <span class="built_in">source</span> destination</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-r</code>表示递归，即包含子目录。注意，<code>-r</code>是必须的，否则 rsync 运行不会成功。<code>source</code>目录表示源目录，<code>destination</code>表示目标目录。</p><p>如果有多个文件或目录需要同步，可以写成下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -r source1 source2 destination</span><br></pre></td></tr></table></figure><p>上面命令中，<code>source1</code>、<code>source2</code>都会被同步到<code>destination</code>目录。</p><h3 id="3-2-a-参数"><a href="#3-2-a-参数" class="headerlink" title="3.2 -a 参数"></a>3.2 <code>-a</code> 参数</h3><p><code>-a</code>参数可以替代<code>-r</code>，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等）。由于 rsync 默认使用文件大小和修改时间决定文件是否需要更新，所以<code>-a</code>比<code>-r</code>更有用。下面的用法才是常见的写法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -a <span class="built_in">source</span> destination</span><br></pre></td></tr></table></figure><p>目标目录<code>destination</code>如果不存在，rsync 会自动创建。执行上面的命令后，源目录<code>source</code>被完整地复制到了目标目录<code>destination</code>下面，即形成了<code>destination/source</code>的目录结构。</p><p>如果只想同步源目录<code>source</code>里面的内容到目标目录<code>destination</code>，则需要在源目录后面加上斜杠。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -a <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>上面命令执行后，<code>source</code>目录里面的内容，就都被复制到了<code>destination</code>目录里面，并不会在<code>destination</code>下面创建一个<code>source</code>子目录。</p><h3 id="3-3-n-参数"><a href="#3-3-n-参数" class="headerlink" title="3.3 -n 参数"></a>3.3 <code>-n</code> 参数</h3><p>如果不确定 rsync 执行后会产生什么结果，可以先用<code>-n</code>或<code>--dry-run</code>参数模拟执行的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -anv <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-n</code>参数模拟命令执行的结果，并不真的执行命令。<code>-v</code>参数则是将结果输出到终端，这样就可以看到哪些内容会被同步。</p><h3 id="3-4-delete-参数"><a href="#3-4-delete-参数" class="headerlink" title="3.4 --delete 参数"></a>3.4 <code>--delete</code> 参数</h3><p>默认情况下，rsync 只确保源目录的所有内容（明确排除的文件除外）都复制到目标目录。它不会使两个目录保持相同，并且不会删除文件。如果要使得目标目录成为源目录的镜像副本，则必须使用<code>--delete</code>参数，这将删除只存在于目标目录、不存在于源目录的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av --delete <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>上面命令中，<code>--delete</code>参数会使得<code>destination</code>成为<code>source</code>的一个镜像。</p><h2 id="四、排除文件"><a href="#四、排除文件" class="headerlink" title="四、排除文件"></a>四、排除文件</h2><h3 id="4-1-exclude-参数"><a href="#4-1-exclude-参数" class="headerlink" title="4.1 --exclude 参数"></a>4.1 <code>--exclude</code> 参数</h3><p>有时，我们希望同步时排除某些文件或目录，这时可以用<code>--exclude</code>参数指定排除模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rsync -av --exclude=<span class="string">&#x27;*.txt&#x27;</span> <span class="built_in">source</span>/ destination</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">rsync -av --exclude <span class="string">&#x27;*.txt&#x27;</span> <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>上面命令排除了所有 TXT 文件。</p><p>注意，rsync 会同步以”点”开头的隐藏文件，如果要排除隐藏文件，可以这样写<code>--exclude=&quot;.*&quot;</code>。</p><p>如果要排除某个目录里面的所有文件，但不希望排除目录本身，可以写成下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av --exclude <span class="string">&#x27;dir1/*&#x27;</span> <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>多个排除模式，可以用多个<code>--exclude</code>参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av --exclude <span class="string">&#x27;file1.txt&#x27;</span> --exclude <span class="string">&#x27;dir1/*&#x27;</span> <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>多个排除模式也可以利用 Bash 的大扩号的扩展功能，只用一个<code>--exclude</code>参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av --exclude=&#123;<span class="string">&#x27;file1.txt&#x27;</span>,<span class="string">&#x27;dir1/*&#x27;</span>&#125; <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>如果排除模式很多，可以将它们写入一个文件，每个模式一行，然后用<code>--exclude-from</code>参数指定这个文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av --exclude-from=<span class="string">&#x27;exclude-file.txt&#x27;</span> <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><h3 id="4-2-include-参数"><a href="#4-2-include-参数" class="headerlink" title="4.2 --include 参数"></a>4.2 <code>--include</code> 参数</h3><p><code>--include</code>参数用来指定必须同步的文件模式，往往与<code>--exclude</code>结合使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av --include=<span class="string">&quot;*.txt&quot;</span> --exclude=<span class="string">&#x27;*&#x27;</span> <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>上面命令指定同步时，排除所有文件，但是会包括 TXT 文件。</p><h2 id="五、远程同步"><a href="#五、远程同步" class="headerlink" title="五、远程同步"></a>五、远程同步</h2><h3 id="5-1-SSH-协议"><a href="#5-1-SSH-协议" class="headerlink" title="5.1 SSH 协议"></a>5.1 SSH 协议</h3><p>rsync 除了支持本地两个目录之间的同步，也支持远程同步。它可以将本地内容，同步到远程服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av <span class="built_in">source</span>/ username@remote_host:destination</span><br></pre></td></tr></table></figure><p>也可以将远程内容同步到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av username@remote_host:<span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>rsync 默认使用 SSH 进行远程登录和数据传输。</p><p>由于早期 rsync 不使用 SSH 协议，需要用<code>-e</code>参数指定协议，后来才改的。所以，下面<code>-e ssh</code>可以省略。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av -e ssh <span class="built_in">source</span>/ user@remote_host:/destination</span><br></pre></td></tr></table></figure><p>但是，如果 ssh 命令有附加的参数，则必须使用<code>-e</code>参数指定所要执行的 SSH 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av -e <span class="string">&#x27;ssh -p 2234&#x27;</span> <span class="built_in">source</span>/ user@remote_host:/destination</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-e</code>参数指定 SSH 使用2234端口。</p><h3 id="5-2-rsync-模块协议（推荐）"><a href="#5-2-rsync-模块协议（推荐）" class="headerlink" title="5.2 rsync 模块协议（推荐）"></a>5.2 rsync 模块协议（推荐）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rsyncd.conf           <span class="comment">#编写模块服务器配置</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">uid = root                      <span class="comment">#rsync进程以root用户身份运行</span></span><br><span class="line">gid = root                      <span class="comment">#rsync进程以root组身份运行</span></span><br><span class="line">use <span class="built_in">chroot</span> = no                 <span class="comment">#禁用 chroot 安全机制</span></span><br><span class="line">max connections = 4             <span class="comment">#设置允许的最大并发连接数为4</span></span><br><span class="line">pid file = /var/run/rsyncd.pid  <span class="comment">#指定rsync进程PID文件路径</span></span><br><span class="line">lock file = /var/run/rsync.lock <span class="comment">#指定rsync锁定文件的路径</span></span><br><span class="line"><span class="built_in">log</span> file = /var/log/rsyncd.log  <span class="comment">#指定rsync日志文件的路径</span></span><br><span class="line"></span><br><span class="line">[module]                     <span class="comment">#模块名称</span></span><br><span class="line">path = /path/to/your/shared/directory  <span class="comment">#需要同步的文件地址</span></span><br><span class="line">comment = My Shared Directory   <span class="comment">#模块描述</span></span><br><span class="line"><span class="built_in">read</span> only = no                  <span class="comment">#可读写</span></span><br><span class="line">list = <span class="built_in">yes</span>                      <span class="comment">#列出模组，false隐藏模组</span></span><br><span class="line"><span class="comment">#hosts allow = 192.168.1.0/24   #特定客户端ip才能访问</span></span><br></pre></td></tr></table></figure><p>除了使用 SSH，如果另一台服务器安装并运行了 rsync 守护程序，则也可以用<code>rsync://</code>协议（默认端口873）进行传输。具体写法是服务器与目标目录之间使用双冒号分隔<code>::</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz <span class="built_in">source</span>/ 192.168.122.32::module/destination</span><br><span class="line"></span><br><span class="line"><span class="comment">#rsync 协议除了使用双冒号，也可以直接用`rsync://`协议指定地址。</span></span><br><span class="line">rsync -avz <span class="built_in">source</span>/ rsync://192.168.122.32/module/destination</span><br></pre></td></tr></table></figure><p>注意，上面地址中的<code>module</code>并不是实际路径名，而是 rsync 守护程序指定的一个资源名，由管理员分配。</p><p>如果想知道 rsync 守护程序分配的所有 module 列表，可以执行下面命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rsync 192.168.122.32::</span><br><span class="line">或者</span><br><span class="line">rsync rsync://192.168.122.32 </span><br></pre></td></tr></table></figure><h2 id="六、增量备份（可选）"><a href="#六、增量备份（可选）" class="headerlink" title="六、增量备份（可选）"></a>六、增量备份（可选）</h2><p>rsync 的最大特点就是它可以完成增量备份，也就是默认只复制有变动的文件。</p><p>除了源目录与目标目录直接比较，rsync 还支持使用基准目录，即将源目录与基准目录之间变动的部分，同步到目标目录。</p><p>具体做法是，第一次同步是全量备份，所有文件在基准目录里面同步一份。以后每一次同步都是增量备份，只同步源目录与基准目录之间有变动的部分，将这部分保存在一个新的目标目录。这个新的目标目录之中，也是包含所有文件，但实际上，只有那些变动过的文件是存在于该目录，其他没有变动的文件都是指向基准目录文件的硬链接。</p><p><code>--link-dest</code>参数用来指定同步时的基准目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -a --delete --link-dest /compare/path /source/path /target/path</span><br></pre></td></tr></table></figure><p>上面命令中，<code>--link-dest</code>参数指定基准目录<code>/compare/path</code>，然后源目录<code>/source/path</code>跟基准目录进行比较，找出变动的文件，将它们拷贝到目标目录<code>/target/path</code>。那些没变动的文件则会生成硬链接。这个命令的第一次备份时是全量备份，后面就都是增量备份了。</p><p>下面是一个脚本示例，备份用户的主目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A script to perform incremental backups using rsync</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"><span class="built_in">set</span> -o nounset</span><br><span class="line"><span class="built_in">set</span> -o pipefail</span><br><span class="line"></span><br><span class="line"><span class="built_in">readonly</span> SOURCE_DIR=<span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">readonly</span> BACKUP_DIR=<span class="string">&quot;/mnt/data/backups&quot;</span></span><br><span class="line"><span class="built_in">readonly</span> DATETIME=<span class="string">&quot;<span class="subst">$(date &#x27;+%Y-%m-%d_%H:%M:%S&#x27;)</span>&quot;</span></span><br><span class="line"><span class="built_in">readonly</span> BACKUP_PATH=<span class="string">&quot;<span class="variable">$&#123;BACKUP_DIR&#125;</span>/<span class="variable">$&#123;DATETIME&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">readonly</span> LATEST_LINK=<span class="string">&quot;<span class="variable">$&#123;BACKUP_DIR&#125;</span>/latest&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$&#123;BACKUP_DIR&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">rsync -av --delete \</span><br><span class="line">  <span class="string">&quot;<span class="variable">$&#123;SOURCE_DIR&#125;</span>/&quot;</span> \</span><br><span class="line">  --link-dest <span class="string">&quot;<span class="variable">$&#123;LATEST_LINK&#125;</span>&quot;</span> \</span><br><span class="line">  --exclude=<span class="string">&quot;.cache&quot;</span> \</span><br><span class="line">  <span class="string">&quot;<span class="variable">$&#123;BACKUP_PATH&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$&#123;LATEST_LINK&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">ln</span> -s <span class="string">&quot;<span class="variable">$&#123;BACKUP_PATH&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;LATEST_LINK&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>上面脚本中，每一次同步都会生成一个新目录<code>$&#123;BACKUP_DIR&#125;/$&#123;DATETIME&#125;</code>，并将软链接<code>$&#123;BACKUP_DIR&#125;/latest</code>指向这个目录。下一次备份时，就将<code>$&#123;BACKUP_DIR&#125;/latest</code>作为基准目录，生成新的备份目录。最后，再将软链接<code>$&#123;BACKUP_DIR&#125;/latest</code>指向新的备份目录。</p><h2 id="七、配置项（配置详解）"><a href="#七、配置项（配置详解）" class="headerlink" title="七、配置项（配置详解）"></a>七、配置项（配置详解）</h2><p><code>-a</code>、<code>--archive</code>参数表示存档模式，保存所有的元数据，比如修改时间（modification time）、权限、所有者等，并且软链接也会同步过去。</p><p><code>--append</code>参数指定文件接着上次中断的地方，继续传输。</p><p><code>--append-verify</code>参数跟<code>--append</code>参数类似，但会对传输完成后的文件进行一次校验。如果校验失败，将重新发送整个文件。</p><p><code>-b</code>、<code>--backup</code>参数指定在删除或更新目标目录已经存在的文件时，将该文件更名后进行备份，默认行为是删除。更名规则是添加由<code>--suffix</code>参数指定的文件后缀名，默认是<code>~</code>。</p><p><code>--backup-dir</code>参数指定文件备份时存放的目录，比如<code>--backup-dir=/path/to/backups</code>。</p><p><code>--bwlimit</code>参数指定带宽限制，默认单位是 KB&#x2F;s，比如<code>--bwlimit=100</code>。</p><p><code>-c</code>、<code>--checksum</code>参数改变<code>rsync</code>的校验方式。默认情况下，rsync 只检查文件的大小和最后修改日期是否发生变化，如果发生变化，就重新传输；使用这个参数以后，则通过判断文件内容的校验和，决定是否重新传输。</p><p><code>--delete</code>参数删除只存在于目标目录、不存在于源目标的文件，即保证目标目录是源目标的镜像。</p><p><code>-e</code>参数指定使用 SSH 协议传输数据。</p><p><code>--exclude</code>参数指定排除不进行同步的文件，比如<code>--exclude=&quot;*.iso&quot;</code>。</p><p><code>--exclude-from</code>参数指定一个本地文件，里面是需要排除的文件模式，每个模式一行。</p><p><code>--existing</code>、<code>--ignore-non-existing</code>参数表示不同步目标目录中不存在的文件和目录。</p><p><code>-h</code>参数表示以人类可读的格式输出。</p><p><code>-h</code>、<code>--help</code>参数返回帮助信息。</p><p><code>-i</code>参数表示输出源目录与目标目录之间文件差异的详细情况。</p><p><code>--ignore-existing</code>参数表示只要该文件在目标目录中已经存在，就跳过去，不再同步这些文件。</p><p><code>--include</code>参数指定同步时要包括的文件，一般与<code>--exclude</code>结合使用。</p><p><code>--link-dest</code>参数指定增量备份的基准目录。</p><p><code>-m</code>参数指定不同步空目录。</p><p><code>--max-size</code>参数设置传输的最大文件的大小限制，比如不超过200KB（<code>--max-size=&#39;200k&#39;</code>）。</p><p><code>--min-size</code>参数设置传输的最小文件的大小限制，比如不小于10KB（<code>--min-size=10k</code>）。</p><p><code>-n</code>参数或<code>--dry-run</code>参数模拟将要执行的操作，而并不真的执行。配合<code>-v</code>参数使用，可以看到哪些内容会被同步过去。</p><p><code>-P</code>参数是<code>--progress</code>和<code>--partial</code>这两个参数的结合。</p><p><code>--partial</code>参数允许恢复中断的传输。不使用该参数时，<code>rsync</code>会删除传输到一半被打断的文件；使用该参数后，传输到一半的文件也会同步到目标目录，下次同步时再恢复中断的传输。一般需要与<code>--append</code>或<code>--append-verify</code>配合使用。</p><p><code>--partial-dir</code>参数指定将传输到一半的文件保存到一个临时目录，比如<code>--partial-dir=.rsync-partial</code>。一般需要与<code>--append</code>或<code>--append-verify</code>配合使用。</p><p><code>--progress</code>参数表示显示进展。</p><p><code>-r</code>参数表示递归，即包含子目录。</p><p><code>--remove-source-files</code>参数表示传输成功后，删除发送方的文件。</p><p><code>--size-only</code>参数表示只同步大小有变化的文件，不考虑文件修改时间的差异。</p><p><code>--suffix</code>参数指定文件名备份时，对文件名添加的后缀，默认是<code>~</code>。</p><p><code>-u</code>、<code>--update</code>参数表示同步时跳过目标目录中修改时间更新的文件，即不同步这些有更新的时间戳的文件。</p><p><code>-v</code>参数表示输出细节。<code>-vv</code>表示输出更详细的信息，<code>-vvv</code>表示输出最详细的信息。</p><p><code>--version</code>参数返回 rsync 的版本。</p><p><code>-z</code>参数指定同步时压缩数据。</p><h2 id="八、免密码同步（用于自动脚本）"><a href="#八、免密码同步（用于自动脚本）" class="headerlink" title="八、免密码同步（用于自动脚本）"></a>八、免密码同步（用于自动脚本）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将密码写到文件，再通过 --password-file 指定该文件，注：该文件的权限必须是 600</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;111111&quot;</span> &gt; /tmp/secrets.file</span><br><span class="line"><span class="built_in">chmod</span> 600 /tmp/secrets.file</span><br><span class="line">rsync -avzP --delete --password-file=/tmp/secrets.file sate@172.18.50.125::125to110 /tmp/sync/</span><br></pre></td></tr></table></figure><p>给大家推荐配置教程： </p><p>Rsync 配置与使用——SateZheng （简书） <a href="https://www.youtube.com/redirect?event=comments&redir_token=QUFFLUhqa2dnWkNiYlh5NVVvaDd3YW04WEViMC1vWHR3d3xBQ3Jtc0tsS3l5NzNUSlgzd1NsNjk2UmN6X0NSMU9vRnBKWXg2X2xMZG8zS2Rkcy1VVjJUU1dzUkFCZnFwRHlvMVZsMDFLUlhydl9GdTVvVU8wTGhsbGVmOW1aUTFPdU1COFEzaEFjdWlCbTFVY09JbVZaYUFlaw&q=https://www.jianshu.com/p/bd3ae9d8069c">https://www.jianshu.com/p/bd3ae9d8069c</a></p>]]></content>
    
    
    <summary type="html">rsync,os,linux,ubuntu,centos,kali,openwrt</summary>
    
    
    
    <category term="os" scheme="https://macin.top/categories/os/"/>
    
    <category term="kali" scheme="https://macin.top/categories/os/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/categories/os/ubuntu/"/>
    
    <category term="centos" scheme="https://macin.top/categories/os/centos/"/>
    
    <category term="debian" scheme="https://macin.top/categories/os/debian/"/>
    
    <category term="openwrt" scheme="https://macin.top/categories/os/openwrt/"/>
    
    
    <category term="os" scheme="https://macin.top/tags/os/"/>
    
    <category term="kali" scheme="https://macin.top/tags/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/tags/ubuntu/"/>
    
    <category term="debian" scheme="https://macin.top/tags/debian/"/>
    
    <category term="centos" scheme="https://macin.top/tags/centos/"/>
    
    <category term="linux" scheme="https://macin.top/tags/linux/"/>
    
    <category term="openwrt" scheme="https://macin.top/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>解决git push本地推送22端口连接超时，改为443端口</title>
    <link href="https://macin.top/posts/37f634a6/"/>
    <id>https://macin.top/posts/37f634a6/</id>
    <published>2025-02-09T14:07:37.000Z</published>
    <updated>2025-02-28T15:34:31.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>之前使用 Git 推送本地仓库至远程仓库时没问题，今天突然出现了这个错误，使用了“黑科技”之后仍然还会出现这个错误。（以前也遇到过，但都是网络问题，自己就好了）</p><h2 id="检查连接"><a href="#检查连接" class="headerlink" title="检查连接"></a>检查连接</h2><ol><li>首先输入以下命令检查SSH是否能够连接成功（ssh后面有空格）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>发现报错：端口连接超时。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh: connect to host github.com port 22: Connection timed out</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在C盘——用户——你的主机名文件夹中找到 .ssh 文件夹；（此前配置SSH时会生成该文件夹）<br>在 .ssh 文件夹中新建文件 config.txt ，输入以下内容，将 xxxxqq.com 更改为你的邮箱，并保存。 </p><p>最后，去掉 .txt 后缀</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User xxxxqq.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure><p>再次执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>会出现以下提示，输入 <strong>yes</strong> 回车即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">&#x27;[ssh.github.com]:443 ([192.30.255.123]:443)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is SHA256:xxx.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>[ssh.github.com]:443,[192.30.255.123]:443<span class="string">&#x27; (RSA) to the list of known hosts.</span></span><br></pre></td></tr></table></figure><p>再次执行<code>ssh -T git@github.com</code>，发现验证通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi Clare! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>接下来可以正常上传代码</p>]]></content>
    
    
    <summary type="html">github,tools,git</summary>
    
    
    
    <category term="tools" scheme="https://macin.top/categories/tools/"/>
    
    <category term="git" scheme="https://macin.top/categories/tools/git/"/>
    
    
    <category term="tools" scheme="https://macin.top/tags/tools/"/>
    
    <category term="git" scheme="https://macin.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>adguard home的简单设置</title>
    <link href="https://macin.top/posts/5a1e786e/"/>
    <id>https://macin.top/posts/5a1e786e/</id>
    <published>2025-01-28T03:10:15.000Z</published>
    <updated>2025-02-28T15:34:31.949Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Adguard Home常规用法DNS神器AdGuard Home最简单设置，网页秒开！秒解析、去广告、防污染的adguardhome安装设置教程！实现家里所有设备过滤广告，实现国内外流量精准分流#一瓶奶油Adguard Home常规用法</li></ul><p>1、重要功能解析</p><ul><li><p>dnsmasq</p><ul><li>在OpenWrt中，dnsmasq是一个轻量级的DNS转发器和DHCP服务器，通常用于提供DNS解析和DHCP服务。</li></ul></li><li><p>作为dnsmasq的上游服务器</p><ul><li>这种方式会保留dnsmasq的本地DNS解析功能。</li><li>dnsmasq处理所有本地的DNS请求，然后将未缓存的请求转发给AdGuard Home。</li><li>这种方式的逻辑是：收到请后，dnsmasq会先尝试从其缓存中查找DNS请求的答案。如果请求的答案存在于dnsmasq的缓存中，则会直接返回给客户端，不会将请求转发给AdGuard Home。如果请求的答案不在dnsmasq的缓存中，则会将请求转发给AdGuard Home。</li></ul></li><li><p>重定向53端口到AdGuardHome</p><ul><li>通过防火墙或路由规则，将所有发往53端口的DNS请求重定向到AdGuard Home的端口。dnsmasq仍然在运行，但其处理的DNS请求被重定向给AdGuard Home。</li><li>这种方式可能保持dnsmasq的某些功能（例如DHCP服务）继续运行，但DNS请求本身由AdGuard Home处理。</li></ul></li><li><p>使用53端口替换dnsmasg</p><ul><li>停止dnsmasq的DNS服务，使AdGuard Home直接监听和处理53端口上的DNS请求。这通常需要修改dnsmasq的配置或停用其DNS服务功能。</li><li>dnsmasq不再处理任何DNS请求。所有DNS相关的功能完全由AdGuard Home接管。</li></ul></li></ul><p>2、设置——DNS设置</p><ul><li><p>DNS汇总：【<a href="https://toolb.cn/publicdns">点击进入</a>】</p></li><li><p>上游DNS服务器</p><ul><li>上游DNS服务器是AdGuard Home在处理客户端的DNS请求时，用来向外部获取DNS解析结果的服务器。上游DNS服务器可以是公共DNS服务器（如阿里DNS、腾讯DNS、Google DNS、Cloudflare DNS等）或你信任的其他DNS服务器。</li></ul></li><li><p>Bootstrap DNS服务器</p><ul><li>Bootstrap DNS服务器用于解析上游DNS服务器的域名。在使用DoH或DoT等加密DNS协议时，需要先解析上游DNS服务器的域名才能建立加密连接，这就是Bootstrap DNS服务器的作用。</li></ul></li><li><p>高级配置可参考官方文档：【<a href="https://github.com/AdguardTeam/AdGuardHome/wiki/Configuration#upstreams">点击进入</a>】</p></li></ul><p>3、拦截规则</p><ul><li><p>开源项目1（规则收集）：【<a href="https://github.com/217heidai/adblockfilters">点击进入</a>】</p></li><li><p>AdGuard 过滤器：【<a href="https://adguard.com/kb/zh-CN/general/ad-filtering/adguard-filters/">点击进入</a>】</p></li><li><p>开源项目2（规则收集）：【<a href="https://github.com/BlueSkyXN/AdGuardHomeRules">点击进入</a>】</p></li></ul><p>4、测试验证</p><ul><li>windows清除DNS缓存：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /flushdnsCopy</span><br></pre></td></tr></table></figure><ul><li>OpenWrt系统清除DNS缓存<ul><li>输入以下代码或者重启OpenWrt</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service dnsmasq restartCopy</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">adguard</summary>
    
    
    
    <category term="adguard" scheme="https://macin.top/categories/adguard/"/>
    
    
    <category term="adguard" scheme="https://macin.top/tags/adguard/"/>
    
  </entry>
  
  <entry>
    <title>关闭debian/ubuntu防火墙，禁用apache web服务命令</title>
    <link href="https://macin.top/posts/7baa7181/"/>
    <id>https://macin.top/posts/7baa7181/</id>
    <published>2025-01-28T03:03:24.000Z</published>
    <updated>2025-02-28T15:34:31.960Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#禁用 ufw 防火墙</span></span><br><span class="line">ufw <span class="built_in">disable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置iptables规则</span></span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line">iptables -t mangle -F</span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">netfilter-persistent save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断 apachectl 是否存在，如果检测到 Apache，则停止 apache2 服务，禁用 apache2 服务</span></span><br><span class="line"><span class="keyword">if</span> [[ -n $(apachectl -v 2&gt;/dev/null) ]]; <span class="keyword">then</span></span><br><span class="line">service apache2 stop</span><br><span class="line">systemctl <span class="built_in">disable</span> apache2</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">debian,ubuntu,kali,os</summary>
    
    
    
    <category term="os" scheme="https://macin.top/categories/os/"/>
    
    <category term="kali" scheme="https://macin.top/categories/os/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/categories/os/ubuntu/"/>
    
    <category term="debian" scheme="https://macin.top/categories/os/debian/"/>
    
    
    <category term="os" scheme="https://macin.top/tags/os/"/>
    
    <category term="kali" scheme="https://macin.top/tags/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/tags/ubuntu/"/>
    
    <category term="debian" scheme="https://macin.top/tags/debian/"/>
    
  </entry>
  
  <entry>
    <title>dism++精简优化windows安装包</title>
    <link href="https://macin.top/posts/71cd8afc/"/>
    <id>https://macin.top/posts/71cd8afc/</id>
    <published>2025-01-28T02:38:55.000Z</published>
    <updated>2025-02-28T15:34:31.951Z</updated>
    
    <content type="html"><![CDATA[<p>准备工作</p><ol><li><a href="https://github.com/Chuyu-Team/Dism-Multi-language/releases">Dism++</a></li><li>Windows原版系统镜像（任何版本皆可）</li></ol><p>第一步 提取所需版本映像</p><p>把准备好的系统镜像，鼠标这里以Windows11为例，利用解压软件，解压到文件夹；运行Dism，通过菜单栏，文件-打开映像文件，编辑映像文件窗口，点击浏览，添加我们解压好的，系统安装wim文件,路径在sources文件夹下，名为install，打开映像后，选中我们需要的系统版本，接着点击导出映像，保存路径随意，名字建议还是保持原来的名字，点击保存开始导出映像。此操作的目的，剔除不用的系统版本，以减少镜像体积。</p><p>第二步 挂载提取的映像</p><p>Dism主界面，文件-挂载映像，挂载映像界面，分别点击浏览，添加我们上一步提取的映像，以及设置挂载路径，最后点击确认，等待映像挂载完成，过程可能需要一段时间，耐心等待！映像挂载好后，单击打开会话，Dism便会加载当前系统映像菜单了</p><p>第三步 删除Windows内置应用</p><p>Dism启动，会默认挂载当前系统，所以我们操作的时候要谨慎，确保选中我们提取映像的系统，进行操作！点击常用工具下Appx管理，右侧窗口显示的都是预装应用，不知道都是什么不要紧，我会做一个对照表放在博客里，选中需要删除的应用，点击删除，就把该应用在映像里删除了！根据你自己的需求，依次删除不需要的应用即可！此操作，可很大程度上，减少系统镜像的体积，系统安装使用后，也可以减少对系统资源的占用！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Clipchamp.Clipchamp 2.2.8.0 neutral ~ yxz26nhyzhsrt --Windows11自带剪辑软件Clipchamp</span><br><span class="line">Microsoft.549981C3F5F10 3.2204.14815.0 neutral ~ 8wekyb3d8bbwe --微软私人助理Cortana（小娜）</span><br><span class="line">Microsoft.BingNews 4.2.27001.0 neutral~ 8wekyb3d8bbwe --Bing新闻资讯</span><br><span class="line">Microsoft.BingWeather 4.53.334200 neutral ~ 8wekyb3d8bbwe--Bing天气</span><br><span class="line">Microsoft.DesktopApplnstaller 2022.310.2333.0 neutral ~ 8wekyb3d8bbwe --UWP软件安装程序</span><br><span class="line">Microsoft.GamingApp 2021.427.138.0 neutral ~ 8wekyb3d8bbwe --xbox游戏服务</span><br><span class="line">Microsoft.GetHelp 10.2201.421.0 neutral ~ 8wekyb3d8bbwe --获取帮助</span><br><span class="line">Microsoft.Getstarted 2021.2204.1.0 neutral ~ 8wekyb3d8bbwe --系统使用技巧</span><br><span class="line">Microsoft.HEIFImageExtension 1.043012.0 x64 8wekyb3d8bbwe --系统内置图片格式查看器</span><br><span class="line">Microsoft.HEVCVideoExtension 1.0.50361.0 x64 8wekyb3d8bbwe --HEVC视频编解码器</span><br><span class="line">Microsoft.MicrosoftOfficeHub 18.2204.1141.0 neutral ~ 8wekyb3d8bbwe --office网页版</span><br><span class="line">Microsoft.MicrosoftSolitaireCollection 4.12.3171.0 neutral ~ 8wekyb3d8bbwe --扑克游戏</span><br><span class="line">Microsoft.MicrosoftStickyNotes 4.2.2.0 neutral ~ 8wekyb3d8bbwe --便签</span><br><span class="line">Microsoft.Paint 11.2201.22.0 neutral ~ 8wekyb3d8bbwe --画图工具</span><br><span class="line">Microsoft.People 2020.901.1724.0 neutral ~ 8wekyb3d8bbwe --人脉</span><br><span class="line">Microsoft.PowerAutomateDesktop 10.0.3735.0 neutral ~ 8wekyb3d8bbwe --流程自动化软件</span><br><span class="line">Microsoft.RawlmageExtension 2.1.30391.0 neutral ~ 8wekyb3d8bbwe --RAW图像扩展</span><br><span class="line">Microsoft.ScreenSketch 2022.2201.12.0 neutral ~ 8wekyb3d8bbwe --截图和草图</span><br><span class="line">Microsoft.SecHealthUl_1000.22621.1.0 x64 8wekyb3d8bbwe --系统安全组件（不建议删除）</span><br><span class="line">Microsoft.StorePurchaseApp_12008.1001.113.0_neutral_~_8wekyb3d8bbwe --微软商店核心组件</span><br><span class="line">Microsoft.Todos_2.54.42772.0_neutral_~_8wekyb3d8bbwe --Todo待办清单软件</span><br><span class="line">Microsoft.VCLibs.140.00 14.0.30704.0_x64 8wekyb3d8bbwe --微软商店组件</span><br><span class="line">Microsoft.vp9VideoExtensions 1.0.50901.0 x64 8wekyb3d8bbwe --VP9视频扩展</span><br><span class="line">Microsoft.WebMediaExtensions 1.0.42192.0 neutral ~ 8wekyb3d8bbwe --Web媒体扩展</span><br><span class="line">Microsoft.WebplmageExtension 1.0.42351.0 x64 8wekyb3d8bbwe --webp图片扩展功</span><br><span class="line">Microsoft.Windows.Photos 21.21030.25003.0 neutral ~ 8wekyb3d8bbwe --照片查看器</span><br><span class="line">Microsoft.WindowsAlarms 2022.2202.24.0 neutral ~ 8wekyb3d8bbwe --闹钟</span><br><span class="line">Microsoft.WindowsCalculator 2020.2103.8.0 neutral ~ 8wekyb3d8bbwe --计算器</span><br><span class="line">Microsoft.WindowsCamera 2022.2201.4.0 neutral ~ 8wekyb3d8bbwe --相机</span><br><span class="line">microsoft.windowscommunicationsapps _16005.14326.20544.0 neutral ~ 8wekyb3d8bbwe --日历</span><br><span class="line">Microsoft.WindowsFeedbackHub 2022106.2230.0 neutral ~ 8wekyb3d8bbwe --反馈中心</span><br><span class="line">Microsoft.WindowsMaps 2022.2202.6.0 neutral ~ 8wekyb3d8bbwe --Windows地图</span><br><span class="line">Microsoft.WindowsNotepad 11.2112.32.0 neutral  8wekyb3d8bbwe --记事本</span><br><span class="line">Microsoft.WindowsSoundRecorder 2021.2103.28.0_neutral_~ 8wekyb3d8bbwe --录音</span><br><span class="line">Microsoft.WindowsStore 22204.1400.4.0 neutral ~ 8wekyb3d8bbwe --微软商店</span><br><span class="line">Microsoft.WindowsTerminal 300112.10983.0 neutral  8wekyb3d8bbwe --Windows终端</span><br><span class="line">Microsoft.XboxTCUl 1.23.28004.0 neutral ~ 8wekyb3d8bbwe --Xbox游戏组件</span><br><span class="line">Microsoft.XboxGameOverlay_1.47.2385.0 neutral~8wekyb3d8bbwe --Xbox游戏组件</span><br><span class="line">Microsoft.XboxGamingOverlay_2.622.3232.0_neutral ~ 8wekyb3d8bbwe --Xbox游戏组件</span><br><span class="line">Microsoft.XboxldentityProvider 12.50.6001.0 neutral ~8wekyb3d8bbwe --Xbox游戏组件</span><br><span class="line">Microsoft.XboxSpeechToTextOverlay_1.17.29001.0 neutral ~ 8wekyb3d8bbwe --Xbox游戏组件</span><br><span class="line">Microsoft.YourPhone 1.22022147.0 neutral ~ 8wekyb3d8bbwe --你的手机</span><br><span class="line">Microsoft.ZuneMusic 11.2202.46.0 neutral ~ 8wekyb3d8bbwe --媒体播放器</span><br><span class="line">Microsoft.ZuneVideo 2019.22020.10021.0 neutral ~ 8wekyb3d8bbwe --电影和电视</span><br><span class="line">Microsoft.Corporationll.QuickAssist 2022.414.1758.0 neutral ~ 8wekyb3d8bbwe --快速助手</span><br><span class="line">MicrosoftWindows.Client.WebExperience 421.20070.195.0 neutral ~cw5n1h2txyewy  --小组件</span><br></pre></td></tr></table></figure><p>第四步 添加硬件驱动</p><p>一些外置设备，每次装完系统，还需要重新安装驱动，我们可以利用Dism进行驱动注入，这样就免去每次安装驱动了。Dism主界面，点击控制面板下的驱动管理，右侧窗口点击添加驱动，路径选择，选中解压好的驱动，一般都是在Drivers文件下，这里需要注意下，现在的驱动都是一键安装程序，我们要给它解压，才能正常注入，成功添加打印机驱动后，我们可在窗口看见打印机设备。</p><p>第五步 对镜像系统进行优化</p><p>每次重装完系统后，桌面图标都不会显示，还需要我们手动设置，通过系统优化，可以让该系统镜像安装后，默认显示桌面图标。Dism主界面，点击控制面板下系统优化，右侧展开桌面图标管理，在桌面显示我的电脑选项，右侧下拉选中显示，依次对其他图标进行相同设置！系统优化里的功能很冗杂，你们可以根据自己的需要进行设置，譬如任务栏、资源管理器，以及安全相关设置等等！如果你想深度精简，还可以针对程序和功能里的Windows功能，进行删减操作，可以很大程度上，减少镜像体积，操作方法也很简单，只要给想删掉的功能，勾选上×，最后点击应用即可！</p><p>第六步 压缩转换WIM安装映像</p><p>当你针对映像所有操作都完成后，Dism主界面，点击文件-保存映像，弹出对话框选择直接保存，映像保存好后，点击文件-卸载映像，过程可能有点长，耐心等待！映像卸载完成后，第二步的映像挂载文件夹会被清空，我们直接删除这个空文件夹即可！回到Dism主界面，选中挂载的当前系统，点击常用工具下的工具箱，单击WIM、ESD互转，源文件选择我们提取并修改的WIM映像文件，目标文件，点击浏览会弹出保存位置，路径随意，你找到了就行，保存类型下拉，选择点ESP，文件名输入install，最后点击保存，开始压缩转换映像，耐心等待完成！</p><p>第七步 打包ISO系统镜像</p><p>系统安装映像压缩转换完成后，会在你选择的路径，生成一个install.esd的文件，我们复制该文件，到第一步解压主目录sources文件夹里，并把原有的install.wim文件删除，此操作就是利用我们修改好的安装文件，替换原版系统里的安装文件，有宝子会有疑问，这个文件的后缀不一样，没问题的，都是微软的镜像格式文件，安装程序都会识别，只不过ESD比WIM格式压缩比要高很多，从而节省存储空间！回到Dism工具箱界面，点击ISO生成器，文件夹路径，选择我们第一步解压的文件夹，ISO生成路径随意，还是你找到了就行，标签就是这个镜像的名字，可以随意填写！最后点击确定，开始打包ISO镜像，过程依旧有点长，耐心的等！</p><p>ISO镜像打包好后，你就可以测试安装了，建议先在虚拟机环境测试，没问题了，再在物理机上安装使用！</p>]]></content>
    
    
    <summary type="html">os,windows</summary>
    
    
    
    <category term="os" scheme="https://macin.top/categories/os/"/>
    
    <category term="windows" scheme="https://macin.top/categories/os/windows/"/>
    
    
    <category term="os" scheme="https://macin.top/tags/os/"/>
    
    <category term="windows" scheme="https://macin.top/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu开启nfs服务</title>
    <link href="https://macin.top/posts/9c9e9b73/"/>
    <id>https://macin.top/posts/9c9e9b73/</id>
    <published>2025-01-27T15:15:06.000Z</published>
    <updated>2025-02-28T15:34:31.957Z</updated>
    
    <content type="html"><![CDATA[<p>在Ubuntu上设置NFS（网络文件系统）服务，可以让你在不同的计算机之间共享文件和目录。下面是如何在Ubuntu上设置NFS服务的基本步骤：</p><h3 id="步骤-1-安装NFS服务器"><a href="#步骤-1-安装NFS服务器" class="headerlink" title="步骤 1: 安装NFS服务器"></a>步骤 1: 安装NFS服务器</h3><p>首先，你需要安装NFS服务器。打开终端并运行以下命令来安装NFS服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install nfs-kernel-server</span><br></pre></td></tr></table></figure><h3 id="步骤-2-配置NFS导出"><a href="#步骤-2-配置NFS导出" class="headerlink" title="步骤 2: 配置NFS导出"></a>步骤 2: 配置NFS导出</h3><p>安装完NFS服务器后，你需要配置哪些目录将被共享。编辑<code>/etc/exports</code>文件来添加或修改共享目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/exports</span><br></pre></td></tr></table></figure><p>在文件中添加一行来指定要共享的目录及其访问权限。例如，要共享<code>/srv/nfs</code>目录给所有网络上的客户端，可以这样设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/srv/nfs *(rw,<span class="built_in">sync</span>,no_subtree_check,no_root_squash)</span><br></pre></td></tr></table></figure><p>这里，<code>rw</code>表示读写权限，<code>sync</code>表示数据同步写入硬盘，<code>no_subtree_check</code>可以加快访问速度，但可能会在删除深层目录时出现问题。根据你的需求调整这些选项。</p><h3 id="步骤-3-导出目录（可选）"><a href="#步骤-3-导出目录（可选）" class="headerlink" title="步骤 3: 导出目录（可选）"></a>步骤 3: 导出目录（可选）</h3><p>修改完<code>/etc/exports</code>文件后，你需要使更改生效。运行以下命令来导出配置的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exportfs -a</span><br></pre></td></tr></table></figure><h3 id="步骤-4-重启NFS服务"><a href="#步骤-4-重启NFS服务" class="headerlink" title="步骤 4: 重启NFS服务"></a>步骤 4: 重启NFS服务</h3><p>为了使更改生效，重启NFS服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nfs-kernel-server</span><br></pre></td></tr></table></figure><h3 id="步骤-5-设置防火墙规则（如果使用UFW）"><a href="#步骤-5-设置防火墙规则（如果使用UFW）" class="headerlink" title="步骤 5: 设置防火墙规则（如果使用UFW）"></a>步骤 5: 设置防火墙规则（如果使用UFW）</h3><p>如果你使用的是UFW防火墙，需要允许NFS相关的端口通过防火墙：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow from any to any port 2049sudo ufw reload</span><br></pre></td></tr></table></figure><h3 id="步骤-6-在客户端挂载NFS共享"><a href="#步骤-6-在客户端挂载NFS共享" class="headerlink" title="步骤 6: 在客户端挂载NFS共享"></a>步骤 6: 在客户端挂载NFS共享</h3><p>在客户端计算机上，你可以使用以下命令来挂载NFS共享：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /mnt/nfs_sharesudo mount -t nfs [服务器IP地址]:/srv/nfs /mnt/nfs_share</span><br></pre></td></tr></table></figure><p>确保替换<code>[服务器IP地址]</code>为你的Ubuntu服务器IP地址。</p><h3 id="步骤-7-自动挂载（可选）"><a href="#步骤-7-自动挂载（可选）" class="headerlink" title="步骤 7: 自动挂载（可选）"></a>步骤 7: 自动挂载（可选）</h3><p>要使挂载在系统启动时自动进行，你可以编辑<code>/etc/fstab</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/fstab</span><br></pre></td></tr></table></figure><p>添加一行如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[服务器IP地址]:/srv/nfs /mnt/nfs_share nfs defaults 0 0</span><br></pre></td></tr></table></figure><p>保存并关闭文件后，NFS共享将在系统启动时自动挂载。</p><p>以上就是在Ubuntu上设置NFS服务的基本步骤。通过这些步骤，你可以轻松地在Ubuntu服务器和客户端之间共享文件和目录。</p><h3 id="解决WINDOWS挂载NFS后文件中文名显示乱码问题"><a href="#解决WINDOWS挂载NFS后文件中文名显示乱码问题" class="headerlink" title="解决WINDOWS挂载NFS后文件中文名显示乱码问题"></a>解决WINDOWS挂载NFS后文件中文名显示乱码问题</h3><p>Window挂载NFS后，文件夹中的中文文件名会显示乱码，主要原因是微软NFS协议不支持UTF-8的问题，导致文件乱码，NAS中文件管理器显示正常。</p><p>目前WIN10中已含有一个Beta设置，支持全局 UTF-8，修改后即可正常显示，按下Win+R，输入 intl.cpl，点击确定<br>切换tab 进入管理中</p><p>区域和时间切换tab<br>点击更改系统区域设置</p><p>勾选Beta版，点击确定，选择重启后，相应的文件名即可显示正常。</p>]]></content>
    
    
    <summary type="html">debian,ubuntu,kali,os</summary>
    
    
    
    <category term="os" scheme="https://macin.top/categories/os/"/>
    
    <category term="kali" scheme="https://macin.top/categories/os/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/categories/os/ubuntu/"/>
    
    <category term="centos" scheme="https://macin.top/categories/os/centos/"/>
    
    <category term="debian" scheme="https://macin.top/categories/os/debian/"/>
    
    
    <category term="os" scheme="https://macin.top/tags/os/"/>
    
    <category term="kali" scheme="https://macin.top/tags/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/tags/ubuntu/"/>
    
    <category term="debian" scheme="https://macin.top/tags/debian/"/>
    
    <category term="centos" scheme="https://macin.top/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>passwall2完美配置</title>
    <link href="https://macin.top/posts/9fc528b9/"/>
    <id>https://macin.top/posts/9fc528b9/</id>
    <published>2025-01-27T15:00:54.000Z</published>
    <updated>2025-02-28T15:34:31.956Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：<br>1、小猫咪插件使用Meta内核+FakeIP模式，不需要套任何插件就能够解决DNS污染、DNS泄露问题及去广告，但是跟IPv6的兼容性存在问题，因此比较适合在纯IPv4下使用。<br>2、ssrPlus+插件需要搭配MosDNS来解决DNS泄露、IPv4&#x2F;IPv6双栈共存等问题<br>那有没有集合上述所有优点、规避缺点的插件呢？</p><p>今天就来聊聊几乎完美的：Pass Wall2</p><p>Pass Wall2能够给我们带来什么的体验？<br>1、解决DNS泄露<br>2、IPv4&#x2F;IPv6双栈共存<br>3、IPv6连接zerotier进行全隧道上网海淘<br>4、去广告</p></blockquote><h1 id="一、规则管理"><a href="#一、规则管理" class="headerlink" title="一、规则管理"></a>一、规则管理</h1><p>删除默认的所有规则，然后添加Reject规则、Direct规则、Proxy规则</p><h2 id="Reject规则填入域名："><a href="#Reject规则填入域名：" class="headerlink" title="Reject规则填入域名："></a>Reject规则填入域名：</h2><p><code>geosite:category-ads-all</code></p><h2 id="Direct规则填入："><a href="#Direct规则填入：" class="headerlink" title="Direct规则填入："></a>Direct规则填入：</h2><p><strong>域名：</strong></p><p><code>xn--ngstr-lra8j.com</code><br><code>geosite:private</code><br><code>geosite:cn</code><br><strong>IP：</strong><br><code>geoip:private</code><br><code>geoip:cn</code></p><h2 id="Proxy规则填入："><a href="#Proxy规则填入：" class="headerlink" title="Proxy规则填入："></a>Proxy规则填入：</h2><p><code>geosite:geolocation-!cn</code></p><p>规则的顺序一定要这样排列：</p><p>1、Reject规则</p><p>2、Direct规则</p><p>3、Proxy规则</p><blockquote><p><strong>注释：</strong><br>geosite:category-ads-all 去广告<br>xn–ngstr-lra8j.com           谷歌商店<br>geosite:private               内网地址<br>geosite:cn                   国内域名</p><p>geoip:private                内网IP<br>geoip:cn                    国内IP<br>geosite:geolocation-!cn      国外域名</p></blockquote><h1 id="二、高级设置"><a href="#二、高级设置" class="headerlink" title="二、高级设置"></a>二、高级设置</h1><p>1.如果不使用UDP代理，就把UDP不转发端口改成-所有，即可</p><p>2.设置TCP转发端口为：仅网页 ，也就是仅允许代理80、443这两个端口</p><p>3.TCP代理方式可以改成TPROXY，也可以默认REDIRECT（勾选IPv6透明代理(TProxy)后，会自动变更为TPROXY）</p><p>4.如果你的节点支持IPv4&#x2F;IPv6互通或者有IPv6的出口IP，可以勾选IPv6透明代理(TProxy)，反之不勾选</p><h1 id="三、修改节点配置Xray分流：-分流总节点"><a href="#三、修改节点配置Xray分流：-分流总节点" class="headerlink" title="三、修改节点配置Xray分流：[分流总节点]"></a>三、修改节点配置Xray分流：[分流总节点]</h1><p>1.Reject设置为：黑洞（丢弃）</p><p>2.Direct设置为：直连（绕过）</p><p>3.Proxy设置为：默认（代理）</p><p>3.*默认设置为：按照自己需求选择一个作为上网海淘的节点</p><p>4.域名解析策略设置为：AsIs （也就是跳过IP匹配、只匹配域名）</p><h1 id="四、基本设置"><a href="#四、基本设置" class="headerlink" title="四、基本设置"></a>四、基本设置</h1><p>1.远程 DNS 协议：DOH</p><p>2.勾选FakeDNS</p><p>注释：</p><p>1、远程DNS出站一定要设置为：远程（走代理），不然你走直连大概率是不通的，但是DOH走代理都是会增加延迟</p><p>2、勾选FakeDNS后，在Proxy规则内的域名，匹配上的会返回一个假IP作为DNS响应（例如198.18.0.0&#x2F;16），最后将域名请求发送给节点服务器VPS在它的网络环境中进行解析IP</p><p>3、不在Proxy规则内的域名则会使用设置的CloudFlare远程DNS进行本地DNS解析真实IP，最后将这个真实IP发送给节点服务器VPS，而如果遇到解析出的是被污染的IP，由于开启了嗅探功能，会探测HTTP请求里的域名，所以就算本地解析出的IP是被污染也不影响</p><p>4、如何判断是走FakeDNS还是走远程DNS，电脑运行CMD窗口，输入nslookup youtube.com回车，输入nslookup ipleak.net回车</p><p>3.主要—节点设置为：Xray分流：[分流总节点]</p><p>4.以上都配置好之后，勾选上主开关保存应用即可</p><p>注意：图上的 *默认 选项处并非是留空，是要填一个节点的</p><p><strong>上述都配置完成后，就能够解决DNS泄露、污染问题和去广告，并且支持双栈IPv4&#x2F;IPv6上网，不需要再去套任何插件和关闭或禁止解析 IPv6 DNS 记录等。</strong></p>]]></content>
    
    
    <summary type="html">passwall2,proxy</summary>
    
    
    
    <category term="proxy" scheme="https://macin.top/categories/proxy/"/>
    
    <category term="v2ray" scheme="https://macin.top/categories/proxy/v2ray/"/>
    
    
    <category term="tools" scheme="https://macin.top/tags/tools/"/>
    
    <category term="proxy" scheme="https://macin.top/tags/proxy/"/>
    
    <category term="passwall2" scheme="https://macin.top/tags/passwall2/"/>
    
  </entry>
  
  <entry>
    <title>truenas scale的arc配置</title>
    <link href="https://macin.top/posts/d265d6c7/"/>
    <id>https://macin.top/posts/d265d6c7/</id>
    <published>2025-01-27T14:24:15.000Z</published>
    <updated>2025-02-28T15:34:31.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="调整默认的-arc内存占用规则"><a href="#调整默认的-arc内存占用规则" class="headerlink" title="调整默认的 arc内存占用规则"></a>调整默认的 arc内存占用规则</h1><blockquote><p>根据ZFS的配置文档，系统通过zfs_arc_max来控制用做缓存的内存使用量。zfs_arc_max的默认值是0，代表50%。此外，还有一个zfs_arc_sys_free的参数，用于控制系统的空余内存上限，默认也是0。</p></blockquote><h2 id="调整配置"><a href="#调整配置" class="headerlink" title="调整配置"></a>调整配置</h2><blockquote><p>因此，我们要调整内存占用规则，就需要修改上述相关参数</p></blockquote><ul><li><p>进入 <code>设置(System Settings）</code>– &gt; <code>高级(Advanced)</code> 里找到 <code>Init/Shutdown Script</code></p></li><li><p>添加脚本 <code>echo SIZE_IN_BYTES &gt;&gt; /sys/module/zfs/parameters/zfs_arc_max</code>其中 SIZE_IN_BYTES换成你想要的数值，例如 <code>2GB</code> 的话，填 <code>2147483648</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 2147483648 &gt;&gt; /sys/module/zfs/parameters/zfs_arc_max</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>ps任何pcie的直通都会导致pve无法使用内存ballooning技术,会让虚拟机在一开始就分配所有需要的内存,所以pve下的truenas不推荐直通pcie设备</p></blockquote><p><a href="https://openzfs.github.io/openzfs-docs/Performance%20and%20Tuning/Module%20Parameters.html#zfs-arc-sys-free">zfs-doc</a><br>上面的链接又详细的zfs的参数说明</p><h1 id="不影响zfs使用的最大的内存但是又要在使用完后积极的释放"><a href="#不影响zfs使用的最大的内存但是又要在使用完后积极的释放" class="headerlink" title="不影响zfs使用的最大的内存但是又要在使用完后积极的释放"></a>不影响zfs使用的最大的内存但是又要在使用完后积极的释放</h1><p>需要修改的参数的有以下这几个</p><p><code>zfs_arc_eviction_pct</code><br><code>zfs_arc_shrink_shift</code><br><code>zfs_arc_sys_free</code></p><h2 id="zfs-arc-eviction-pct"><a href="#zfs-arc-eviction-pct" class="headerlink" title="zfs_arc_eviction_pct"></a>zfs_arc_eviction_pct</h2><p>zfs_arc_eviction_pct 的默认值为 200%，表示在内存不足时，为每 2KB 释放内存，1KB 可被重新分配使用。增大该值（如 300%-400%）将加快 ARC 在高负载后的释放速度。此设置会增加 ARC<br>清理时释放的内存总量，从而有效释放更多的内存TrueNAS Open Enterprise Storage<br>50% ARC 每次收缩当前大小的 50%，即一半。<br>25%<br>12.5%<br>6.25%<br>3.125%<br>1.5625%<br>0.78125%<br>将 zfs_arc_eviction_pct 设置为 300 或 400，确保在密集 IO 操作后有更快速的缓存释放。</p><h2 id="zfs-arc-shrink-shift"><a href="#zfs-arc-shrink-shift" class="headerlink" title="zfs_arc_shrink_shift"></a>zfs_arc_shrink_shift</h2><p>zfs_arc_shrink_shift 默认值为 7，意味着在内存紧张时，ARC 缩减速率约为 0.8%。降低该值（如设为 4-5）会更激进地减少 ARC 缓存的大小，适合在内存频繁短缺时使用<br>设置 zfs_arc_shrink_shift 为 4 或 5，以实现较为激进的内存释放，确保在高负载后更快腾出内存。</p><h2 id="zfs-arc-sys-free"><a href="#zfs-arc-sys-free" class="headerlink" title="zfs_arc_sys_free"></a>zfs_arc_sys_free</h2><p>zfs_arc_sys_free 此参数决定系统应该保留多少空闲内存。默认为系统物理内存的 1&#x2F;64 或 512KB，适当增大该值可以让 ARC 更积极地释放缓存，保证系统有更充足的可用内存( TrueNAS Open Enterprise<br>Storage<br>如果有 14GB 总内存，可以设置 zfs_arc_sys_free 为<br>268435456（256MB）或更大，这样可以在高内存需求时保留较多的空闲内存，防止 ARC 占用过多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 300 &gt;&gt; /sys/module/zfs/parameters/zfs_arc_eviction_pct</span><br><span class="line"><span class="built_in">echo</span> 4 &gt;&gt; /sys/module/zfs/parameters/zfs_arc_shrink_shift</span><br><span class="line"><span class="built_in">echo</span> 1073741824 &gt;&gt; /sys/module/zfs/parameters/zfs_arc_sys_free</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">truenasscale,os,nas</summary>
    
    
    
    <category term="os" scheme="https://macin.top/categories/os/"/>
    
    <category term="truenasscale" scheme="https://macin.top/categories/os/truenasscale/"/>
    
    
    <category term="os" scheme="https://macin.top/tags/os/"/>
    
    <category term="nas" scheme="https://macin.top/tags/nas/"/>
    
    <category term="truenasscale" scheme="https://macin.top/tags/truenasscale/"/>
    
  </entry>
  
  <entry>
    <title>服务器用rclone挂载onedrive定时远程备份</title>
    <link href="https://macin.top/posts/20d174c8/"/>
    <id>https://macin.top/posts/20d174c8/</id>
    <published>2025-01-27T13:47:30.000Z</published>
    <updated>2025-02-28T15:34:31.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装-rclone"><a href="#一、安装-rclone" class="headerlink" title="一、安装 rclone"></a>一、安装 rclone</h1><p>使用脚本下载安装 Rclone：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://rclone.org/install.sh | sudo bash</span><br></pre></td></tr></table></figure><p>1.在 rclone 中配置 OneDrive</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone config</span><br></pre></td></tr></table></figure><p>输入 n 创建一个新配置</p><p>然后填一个名称，例如onedrive，会要求选择要挂载的网盘，找到 Microsoft OneDrive 并输入其前面的序号，接下来会要求输入 client_id 和 client_secret。然后会出现 OneDrive 区域选择，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Choose national cloud region <span class="keyword">for</span> OneDrive.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;global&quot;</span>).</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / Microsoft Cloud Global</span><br><span class="line">   \ <span class="string">&quot;global&quot;</span></span><br><span class="line"> 2 / Microsoft Cloud <span class="keyword">for</span> US Government</span><br><span class="line">   \ <span class="string">&quot;us&quot;</span></span><br><span class="line"> 3 / Microsoft Cloud Germany</span><br><span class="line">   \ <span class="string">&quot;de&quot;</span></span><br><span class="line"> 4 / Azure and Office 365 operated by 21Vianet <span class="keyword">in</span> China</span><br><span class="line">   \ <span class="string">&quot;cn&quot;</span></span><br></pre></td></tr></table></figure><p>可以直接输入 1 选择全球</p><p>然后是选择是否进行高级配置，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dit advanced config? (y/n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br></pre></td></tr></table></figure><p>可以输入 n ，</p><p>接着是自动配置选择，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Remote config</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y <span class="keyword">if</span> not sure</span><br><span class="line"> * Say N <span class="keyword">if</span> you are working on a remote or headless machine</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br></pre></td></tr></table></figure><p>可以输入 n ，</p><p>这里需要获取授权码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">For this to work, you will need rclone available on a machine that has</span><br><span class="line">a web browser available.</span><br><span class="line"></span><br><span class="line">For more <span class="built_in">help</span> and alternate methods see: https://rclone.org/remote_setup/</span><br><span class="line"></span><br><span class="line">Execute the following on the machine with the web browser (same rclone</span><br><span class="line">version recommended):</span><br><span class="line"></span><br><span class="line">    rclone authorize <span class="string">&quot;onedrive&quot;</span></span><br><span class="line"></span><br><span class="line">Then <span class="built_in">paste</span> the result below:</span><br></pre></td></tr></table></figure><p>授权码需要在本地电脑上获取，访问 <a href="https://rclone.org/downloads/">rclone</a> 根据你的电脑系统版本下载对应的 Rclone。</p><p>下载完成后解压，进入存放 Rclone 的目录，打开 Powershell ，Rclone 放在 D:\下载\rclone-v1.67.0-windows-amd64 ，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\下载\rclone-v1.67.0-windows-amd64</span><br></pre></td></tr></table></figure><p>在存放 Rclone 的目录可以看到 rclone.exe 的可执行程序，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rclone authorize <span class="string">&quot;onedrive&quot;</span></span><br></pre></td></tr></table></figure><p>浏览器应该会自动打开，如果浏览器没有打开可以根据提示复制地址访问。如果浏览器登录了 OneDrive 的话会直接显示授权确认信息，如果没有登录的话会弹出登录页面，登录 OneDrive 后也会显示授权确认信息。</p><p>选择 接受 后在本地命令行会显示一串 JSON 格式的授权信息，复制授权信息包括首尾的 {} ，到 Linux 终端粘贴。</p><p>然后是选择 OneDrive 的类型，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> an existing value</span><br><span class="line"> 1 / OneDrive Personal or Business</span><br><span class="line">   \ <span class="string">&quot;onedrive&quot;</span></span><br><span class="line"> 2 / Root Sharepoint site</span><br><span class="line">   \ <span class="string">&quot;sharepoint&quot;</span></span><br><span class="line"> 3 / Sharepoint site name or URL (e.g. mysite or https://contoso.sharepoint.com/sites/mysite)</span><br><span class="line">   \ <span class="string">&quot;url&quot;</span></span><br><span class="line"> 4 / Search <span class="keyword">for</span> a Sharepoint site</span><br><span class="line">   \ <span class="string">&quot;search&quot;</span></span><br><span class="line"> 5 / Type <span class="keyword">in</span> driveID (advanced)</span><br><span class="line">   \ <span class="string">&quot;driveid&quot;</span></span><br><span class="line"> 6 / Type <span class="keyword">in</span> SiteID (advanced)</span><br><span class="line">   \ <span class="string">&quot;siteid&quot;</span></span><br><span class="line"> 7 / Sharepoint server-relative path (advanced, e.g. /teams/hr)</span><br><span class="line">   \ <span class="string">&quot;path&quot;</span></span><br></pre></td></tr></table></figure><p>输入 1</p><p>然后会显示找到的 OneDrive 账户，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Found 1 drives, please <span class="keyword">select</span> the one you want to use:</span><br><span class="line">0: OneDrive (business) <span class="built_in">id</span>=</span><br></pre></td></tr></table></figure><p>根据提示输入序号，</p><p>这里会根据你输入的序号查找账户，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Found drive <span class="string">&#x27;root&#x27;</span> of <span class="built_in">type</span> <span class="string">&#x27;business&#x27;</span>, URL: https://xxx-my.sharepoint.com/personal/changbin_xxx_onmicrosoft_com/Documents</span><br><span class="line">Is that okay?</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br></pre></td></tr></table></figure><p>确认无误后输入 y ，</p><p>接着会显示你选择的配置信息，确认无误后输入 y 保存配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Current remotes:</span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">onedrive                onedrive</span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; q</span><br></pre></td></tr></table></figure><p>经过上面的设置后，我们就成功地将Rclone连接挂载到OneDrive网盘啦。</p><h1 id="二、挂载到-vps"><a href="#二、挂载到-vps" class="headerlink" title="二、挂载到 vps"></a>二、挂载到 vps</h1><p>首先新建一个文件夹用于挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /onedrive</span><br></pre></td></tr></table></figure><p>开始挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone mount onedrive: /onedrive --allow-other --allow-non-empty --vfs-cache-mode writes --daemon</span><br></pre></td></tr></table></figure><p>其中 onedrive 是 rclone 配置时输入的配置名称，&#x2F;onedrive 是挂载目录，–daemon 是指后台运行。</p><h1 id="三、编写同步脚本"><a href="#三、编写同步脚本" class="headerlink" title="三、编写同步脚本"></a>三、编写同步脚本</h1><p>这个脚本也不算麻烦，首先输入下方命令新建同步脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim rclone.sh</span><br></pre></td></tr></table></figure><p>按Insert键进入编辑模式，粘贴以下三条内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">rclone <span class="built_in">sync</span> /www/backup/database onedrive:bak/database</span><br><span class="line">rclone <span class="built_in">sync</span> /www/backup/site onedrive:bak/site</span><br><span class="line"></span><br><span class="line"><span class="comment">#格式</span></span><br><span class="line">rclone <span class="built_in">sync</span> path/to/backupfolders onedrive:</span><br></pre></td></tr></table></figure><p>然后按Esc键退出编辑模式，输入:wq保存并退出。</p><p>脚本首行是注释，上面的脚本只包含两条命令，第二行是将&#x2F;www&#x2F;backup&#x2F;database目录及里面的数据库备份文件，同步到OneDrive的bak&#x2F;database文件夹里。第三行是同步网站备份文件。</p><p>接着为新建的脚本增加执行权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x rclone.sh</span><br></pre></td></tr></table></figure><p>设置定时任务</p><p>脚本编写成功后，需要设置定时任务来运行脚本，才能完成自动备份。</p><p>在设置之前，首先将VPS服务器的时区设置为东八区，与我们的作息相同。如果你是国内的VPS或云服务器通常不需要设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/share/zoneinfo/Asia/Chongqing /etc/localtime</span><br></pre></td></tr></table></figure><p>输入y确定。</p><p>接下来我们设置定时任务，输入下方命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>按Insert键进入编辑模式，在尾部添加一行即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">35 1 * * *  /root/rclone.sh &gt;&gt; /root/rclone.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>这行内容的意思是，每天凌晨1点35分，运行rclone.sh脚本，将网站和数据库备份文件同步到OneDrive网盘。</p><p>然后等到第二天，登录OneDrive盘就能看到备份文件已经同步过来了。</p><h1 id="四、创建-OneDrive-API（注册微软开发者E5账户）"><a href="#四、创建-OneDrive-API（注册微软开发者E5账户）" class="headerlink" title="四、创建 OneDrive API（注册微软开发者E5账户）"></a>四、创建 OneDrive API（注册微软开发者E5账户）</h1><p>参考<a href="https://macin.top/posts/75823327/">https://macin.top/posts/75823327/</a></p><p>1.获取 client_id</p><p>首先访问 <a href="https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps">Microsoft Azure</a> 应用注册，登录账号后点击应用注册</p><p>点击左上角的新注册</p><p>如图所示进行配置，名称可以随便写，账户类型选择第三项</p><p>点击注册后可以看到你的应用的相关信息，复制好 应用程序 (客户端) ID ，这个就是 client_id</p><p>2.获取 client_secret</p><p>依次点击证书和密码，新客户端密码，在截止期限中将时间选择为最长（即两年）</p><p>然后就可以看见值和机密 ID，我们只需要记录下值就可以</p><p>3.添加 API 权限</p><p>依次点击 API 权限，添加权限，Microsoft Graph，在右边栏搜索并添加权限。</p><p>需要 Files.Read, Files.ReadWrite, Files.Read.All, Files.ReadWrite.All, offline_access, User.Read 这几项</p><p>4.添加身份验证</p><p>依次点击身份验证，添加平台，Web</p><p>在重定向 URI 中输入<code>http://localhost</code></p><p>OneDrive API 创建完成。</p>]]></content>
    
    
    <summary type="html">e5,onedrive,rclone</summary>
    
    
    
    <category term="tools" scheme="https://macin.top/categories/tools/"/>
    
    <category term="onedrive" scheme="https://macin.top/categories/tools/onedrive/"/>
    
    <category term="rclone" scheme="https://macin.top/categories/tools/onedrive/rclone/"/>
    
    
    <category term="tools" scheme="https://macin.top/tags/tools/"/>
    
    <category term="onedrive" scheme="https://macin.top/tags/onedrive/"/>
    
    <category term="rclone" scheme="https://macin.top/tags/rclone/"/>
    
  </entry>
  
  <entry>
    <title>openmediavault(omv)的安装与配置，说部署zfs文件系统，安装docker</title>
    <link href="https://macin.top/posts/5944305b/"/>
    <id>https://macin.top/posts/5944305b/</id>
    <published>2025-01-27T12:32:09.000Z</published>
    <updated>2025-02-28T15:34:31.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Openmediavault-的安装与配置"><a href="#Openmediavault-的安装与配置" class="headerlink" title="Openmediavault 的安装与配置"></a>Openmediavault 的安装与配置</h1><h2 id="获取系统镜像、制作启动-U-盘"><a href="#获取系统镜像、制作启动-U-盘" class="headerlink" title="获取系统镜像、制作启动 U 盘"></a>获取系统镜像、制作启动 U 盘</h2><p>目前，Openmediavault 有基于 Debian 10 的 5.X 和基于 Debian 11 的 6.X 两个现役的大版本，我们这里选择较新的后者。打开 <a href="https://www.openmediavault.org/download.html">OMV 官方网站的下载页</a>，下载 Stable 版本的 ISO 镜像，完成后用 SHA265 校验一下文件的完整性。我这里镜像的版本是 <code>6.0.24</code>。</p><p>使用 rufus 或者类似工具，将 ISO 文件烧入 U 盘。我这里使用 UEFI 启动，分区类型选择 GPT；烧录时会提示选择 ISO 还是 DD 模式，推荐选择速度更快的 DD 模式。</p><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p>将服务器插上网线和电源，插入烧好镜像的 U 盘，开机选择 U 盘启动。随后会出现 OMV 的 LOGO 和启动选择项，选择 Install 回车进入安装程序：</p><ol><li>选择语言：选择中文即可；</li><li>选择区域：中国；</li><li>选择键盘映射：汉语；</li><li>选择网络接口：选择插网线对应的接口；</li><li>主机名：默认即可；</li><li>域名：默认即可；</li><li>root 用户密码和确认：推荐留空以禁用，不建议直接使用 root 用户；</li><li>设置初始用户全名和用户名：自定义，我这里取 <code>ceba</code>；</li><li>设置初始用户密码和确认：自己设置；</li><li>提示多个磁盘驱动器：回车继续；</li><li>选择磁盘：选择用于安装系统的磁盘；</li><li>分区方案：选“是”，需要自己移动光标；</li><li>配置软件包管理器：不要选择“中国”，选择“手动输入信息”；</li><li>Debian 仓库镜像主机名：这里推荐清华大学 TUNA，地址是 <code>mirrors.tuna.tsinghua.edu.cn</code>；</li><li>Debian 仓库镜像目录：对于清华大学 TUNA 源，默认即可；</li><li>HTTP 代理信息：这里不需要，留空；</li><li>结束安装进程：回车选择继续，结束。</li></ol><p>系统会自动重新启动，默认启动项应该会被自动修改为 Openmediavault。启动后会进入 Debian 的登陆界面，上面有提示当前服务器 IP 地址，可以用来访问 Web 管理界面。</p><p>PS：安装系统的时候需要外接显示器，但我手头并没有 DP 接口的显示器，只好找了条 DP 转 Type-C 的视频线接到便携屏上。另外，没得采集卡，所以没图。</p><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><p>打开浏览器，输入机器登陆界面看到的 IP，打开 Web 管理界面的登陆页面。这里也可以尝试输入 <code>openmediavault.local</code>（即之前设置的主机名+域名），如果网络环境合适也可以打开 Web 管理界面。</p><p>Web 管理界面的用户名是 <code>admin</code>，初始密码是 <code>openmediavault</code>，’’’不是’’’此前设置的 Debian 用户名和密码。输入用户密码后即可进入系统。</p><h3 id="修改管理界面密码"><a href="#修改管理界面密码" class="headerlink" title="修改管理界面密码"></a>修改管理界面密码</h3><p>点击右上角设置图标、“更改密码”，输入新的密码后点击保存。</p><h3 id="修改网络配置"><a href="#修改网络配置" class="headerlink" title="修改网络配置"></a>修改网络配置</h3><p>根据我家的网络环境，我需要把 IPv4 地址改为静态地址，并且启用 IPv6。点击左侧“网络”、“接口”，在右侧选中需要修改的接口。</p><p>然后点击编辑按钮，进入编辑界面：</p><ul><li>IPv4：方式改为“静态”，地址、子网掩码、网关根据需要填写；</li><li>IPv6：方式改为“自动”。</li><li>DNS：根据需要填写，我这里填写网关地址。</li></ul><p>填写完成后滑倒最下方，点击“保存”。随后页面上方会弹出黄色框，提示需要应用设置，点击右侧对勾图标，勾选“确认”后点击“是”按钮。随后网络配置会立即应用，大概率会卡在“正在应用”界面，需要重新输入地址进入 Web 管理界面。</p><p>PS：OMV 的几乎所有配置都需要二次确认应用。请在操作后稍等一会儿，看看会不会弹出黄色提示框。</p><h3 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h3><p>点击左侧“系统”、“时间和日期”，在“时区”一栏选择 <code>Asia/Shanghai</code>。点击保存，二次确认应用。</p><h3 id="设置自动登出时间"><a href="#设置自动登出时间" class="headerlink" title="设置自动登出时间"></a>设置自动登出时间</h3><p>OMV 默认的自动登出时间是 5 分钟，可以调长一些。点击左侧“系统”、“工作台”，在“自动登出”一栏选择希望的时间，例如 60 分钟。点击保存，二次确认应用。</p><h2 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h2><p>之后不少工作需要 ssh 到服务器进行，请准备一个 ssh 客户端。我这里使用 Windows Terminal 通过 Powershell 或者 WSL 登录。</p><h3 id="配置-ssh-用户"><a href="#配置-ssh-用户" class="headerlink" title="配置 ssh 用户"></a>配置 ssh 用户</h3><p>要通过 ssh 连接到服务器，需要将用户放入 <code>ssh</code> 用户组才可使用 ssh 登录。</p><p>点击左侧“用户”、“用户”，选中安装时创建的初始用户，点击“编辑”图标。</p><p>点击“用户组”一行，在 <code>ssh</code> 处打勾，在最下方点击“保存”按钮，二次确认应用修改。</p><p>随后就可以尝试用 ssh 登陆了。</p><h3 id="通过-ssh-登录"><a href="#通过-ssh-登录" class="headerlink" title="通过 ssh 登录"></a>通过 ssh 登录</h3><p>在终端中，输入下面的命令通过 ssh 登录服务器，其中 <code>&lt;your_user_name&gt;</code> 是初始用户名、<code>&lt;your_nas_ip&gt;</code> 是服务器 IP 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;your_user_name&gt;@&lt;your_nas_ip&gt;</span><br></pre></td></tr></table></figure><p>通过下面的命令将公钥拷贝到服务器，则可以免密码登录服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id &lt;your_user_name&gt;@&lt;your_nas_ip&gt;</span><br></pre></td></tr></table></figure><h3 id="调整-ssh-配置"><a href="#调整-ssh-配置" class="headerlink" title="调整 ssh 配置"></a>调整 ssh 配置</h3><p>点击左侧“服务”、“SSH”，取消“允许 root 登录”、“密码认证”，勾选“公钥认证”，以提升服务器安全性。</p><h3 id="配置-OMV-源"><a href="#配置-OMV-源" class="headerlink" title="配置 OMV 源"></a>配置 OMV 源</h3><p>清华大学 TUNA 源提供了 Openmediavault 的镜像，推荐使用它来增快下载速度。</p><p>通过 ssh 登录服务器后，执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 root 用户</span></span><br><span class="line">sudo su</span><br><span class="line"><span class="comment"># 设置 OMV 软件源环境变量</span></span><br><span class="line">omv-env <span class="built_in">set</span> OMV_APT_REPOSITORY_URL <span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/OpenMediaVault/public&quot;</span></span><br><span class="line">omv-env <span class="built_in">set</span> OMV_APT_ALT_REPOSITORY_URL <span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/OpenMediaVault/packages&quot;</span></span><br><span class="line">omv-env <span class="built_in">set</span> OMV_APT_KERNEL_BACKPORTS_REPOSITORY_URL <span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/debian&quot;</span></span><br><span class="line">omv-env <span class="built_in">set</span> OMV_APT_SECURITY_REPOSITORY_URL <span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/debian-security&quot;</span></span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line">omv-salt stage run all</span><br></pre></td></tr></table></figure><p>使环境变量生效一步可能会耗费较长的时间（约 2 分钟），请耐心等待。之后可以手动检查 <code>/etc/apt/source.list.d/</code> 目录下的几个文件，看软件源是否成功更改。</p><h3 id="安装更新"><a href="#安装更新" class="headerlink" title="安装更新"></a>安装更新</h3><p>点击左侧“系统”、“更新管理”、“更新”，首先点击“检测是否有更新”图标（图案是搜索），然后点击“安装更新”图标（图案是下载）、确认。</p><p>当然也可以用命令行完成这些工作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br></pre></td></tr></table></figure><h2 id="安装-OMV-Extras-org"><a href="#安装-OMV-Extras-org" class="headerlink" title="安装 OMV-Extras.org"></a>安装 OMV-Extras.org</h2><p>OMV-Extras.org 是 OMV 的增强插件，后续部署 ZFS 和 Docker 都需要它。</p><p>安装 OMV-Extras 需要管理员权限，下面的操作都需要通过 <code>sudo su</code> 命令，在 root 用户下进行。</p><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><p>OMV-Extras 安装需要访问 Github。考虑到我这里的网络环境，需要使用 HTTP 代理来保证安装顺利。</p><p>首先，配置好代理服务器，允许局域网连接。</p><p>SSH 到服务器，在主目录下新建 <code>proxy.sh</code>，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=&quot;http://&lt;your_proxy_ip&gt;:&lt;your_proxy_port&gt;/&quot;</span><br><span class="line">export https_proxy=&quot;http://&lt;your_proxy_ip&gt;:&lt;your_proxy_port&gt;/&quot;</span><br><span class="line">export ftp_proxy=&quot;http://&lt;your_proxy_ip&gt;:&lt;your_proxy_port&gt;/&quot;</span><br><span class="line">export no_proxy=&quot;127.0.0.1,localhost&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For curl</span></span><br><span class="line">export HTTP_PROXY=&quot;http://&lt;your_proxy_ip&gt;:&lt;your_proxy_port&gt;/&quot;</span><br><span class="line">export HTTPS_PROXY=&quot;http://&lt;your_proxy_ip&gt;:&lt;your_proxy_port&gt;/&quot;</span><br><span class="line">export FTP_PROXY=&quot;http://&lt;your_proxy_ip&gt;:&lt;your_proxy_port&gt;/&quot;</span><br><span class="line">export NO_PROXY=&quot;127.0.0.1,localhost&quot;</span><br></pre></td></tr></table></figure><p>运行下面的命令，让代理生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> proxy.sh</span><br></pre></td></tr></table></figure><p>然后测试一下代理是否能够正常连接，如果能看到正在连接代理服务器的相关输出，则说明代理正常。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.co</span><br></pre></td></tr></table></figure><p>PS：这个方法是用来临时使用代理的，退出登陆后代理设置就失效了。也可以用 OMV 的 Web 管理界面设置代理，但我折腾半天发现没这个方便。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O - https://github.com/OpenMediaVault-Plugin-Developers/packages/raw/master/install | bash</span><br></pre></td></tr></table></figure><p>打开 OMV 的 Web 管理界面，按下 <code>Ctrl + Shift + R</code> 或者 <code>Ctrl + F5</code> 强制刷新页面缓存。然后可以在左侧“系统”菜单下看到“omv-extras”项，说明安装成功。</p><p>PS：强制刷新 Web 管理界面是常规操作，能解决很多奇怪问题。</p><h3 id="设置-OMV-Extras-的镜像"><a href="#设置-OMV-Extras-的镜像" class="headerlink" title="设置 OMV-Extras 的镜像"></a>设置 OMV-Extras 的镜像</h3><p>OMV-Extras 引入了一些新的软件源，我们同样可以将之换成清华大学 TUNA 源来加快下载速度。</p><p>通过 ssh 登录服务器后，执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 root 用户</span></span><br><span class="line">sudo su</span><br><span class="line"><span class="comment"># 设置 OMV 软件源环境变量</span></span><br><span class="line">omv-env <span class="built_in">set</span> OMV_EXTRAS_APT_REPOSITORY_URL <span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/OpenMediaVault/openmediavault-plugin-developers&quot;</span></span><br><span class="line">omv-env <span class="built_in">set</span> OMV_DOCKER_APT_REPOSITORY_URL <span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian&quot;</span></span><br><span class="line">omv-env <span class="built_in">set</span> OMV_PROXMOX_APT_REPOSITORY_URL <span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/proxmox/debian&quot;</span></span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line">omv-salt stage run all</span><br></pre></td></tr></table></figure><p>和之前相同，使环境变量生效一步可能会耗费较长的时间（约 2 分钟），请耐心等待。同样可以手动检查 <code>/etc/apt/source.list.d/</code> 目录下的几个文件，看软件源是否成功更改。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>OK，OMV 的基本安装和配置算是告一段落了，可以说是非常麻烦。接下来，我会在 OMV 上部署 ZFS 文件系统，然后用 Docker 部署 qBittorrent，让 NAS 正式工作起来。</p><h1 id="Openmediavault-部署-ZFS-文件系统"><a href="#Openmediavault-部署-ZFS-文件系统" class="headerlink" title="Openmediavault 部署 ZFS 文件系统"></a>Openmediavault 部署 ZFS 文件系统</h1><h2 id="替换-Proxmox-内核"><a href="#替换-Proxmox-内核" class="headerlink" title="替换 Proxmox 内核"></a>替换 Proxmox 内核</h2><p>Proxmox 内核（即 pve 内核）对 ZFS 文件系统的支持要更好。要使用 ZFS 文件系统，首先需要将 Debian 内核替换为 Proxmox 内核。</p><p>PS：踩的坑之一，不换 Proxmox 内核，ZFS 跑不起来……</p><h3 id="安装-openmediavault-kernel-插件"><a href="#安装-openmediavault-kernel-插件" class="headerlink" title="安装 openmediavault-kernel 插件"></a>安装 openmediavault-kernel 插件</h3><p>登录 OMV 的 Web 管理界面，点击左侧“系统”、“插件”，在右侧搜索“proxmox”即可找到 openmediavault-kernel 插件。选中 openmediavault-kernel，点击“安装”按钮，确认安装。</p><p>安装完成后，按下 <code>Ctrl + Shift + R</code> 或者 <code>Ctrl + F5</code> 强制刷新页面缓存，然后可以在左侧“系统”菜单下看到“内核”项。</p><h3 id="安装-Proxmox-内核"><a href="#安装-Proxmox-内核" class="headerlink" title="安装 Proxmox 内核"></a>安装 Proxmox 内核</h3><p>点击左侧“系统”、“内核”，点击右侧“Proxmox”图标，选择“安装 Proxmox 内核”一项，开始安装进程。</p><p>安装完成后，刷新页面，可以看到 pve 内核已是默认。</p><p>点击右上角电源图标，重启系统。如果能够正常进入系统，就可以移除常规内核了。</p><h3 id="清理其他内核"><a href="#清理其他内核" class="headerlink" title="清理其他内核"></a>清理其他内核</h3><p>点击左侧“系统”、“内核”，点击右侧“Proxmox”图标，选择“移除非 Proxmox 内核”一项，开始清理其他内核。</p><p>刷新页面后，可看到只有 pve 内核了。这里可以考虑再重启系统一次。</p><h2 id="安装-ZFS-文件系统支持"><a href="#安装-ZFS-文件系统支持" class="headerlink" title="安装 ZFS 文件系统支持"></a>安装 ZFS 文件系统支持</h2><h3 id="禁用-backports-源"><a href="#禁用-backports-源" class="headerlink" title="禁用 backports 源"></a>禁用 backports 源</h3><p>PS：踩的坑之二，不禁用 backports 源，ZFS 装不上……</p><p>点击左侧“系统”、“omv-extras”、“设置”，取消勾选“Backports”选项，点击保存，二次确认应用。</p><h3 id="安装-openmediavault-zfs-插件"><a href="#安装-openmediavault-zfs-插件" class="headerlink" title="安装 openmediavault-zfs 插件"></a>安装 openmediavault-zfs 插件</h3><p>点击左侧“系统”、“插件“，在右侧搜索“zfs”即可找到 openmediavault-zfs 插件。选中 openmediavault-zfs，点击“安装”按钮，确认安装。</p><p>安装完成后，按下 <code>Ctrl + Shift + R</code> 或者 <code>Ctrl + F5</code> 强制刷新页面缓存，然后可以在左侧“存储器”菜单下看到“zfs”项。</p><h2 id="创建-ZFS-存储池、数据集"><a href="#创建-ZFS-存储池、数据集" class="headerlink" title="创建 ZFS 存储池、数据集"></a>创建 ZFS 存储池、数据集</h2><p>ZFS 文件系统中，有存储池、数据集、卷等概念。存储池是一组磁盘构成的逻辑卷，多个磁盘组成软 RAID 阵列；数据集则相当于存储池的一个子文件夹，可更改的选项会比存储池更多，通常用它来存储数据。</p><h3 id="擦除硬盘"><a href="#擦除硬盘" class="headerlink" title="擦除硬盘"></a>擦除硬盘</h3><p>创建存储池前需要先将磁盘擦除。登录 OMV 的 Web 管理界面，点击左侧“存储器”、“磁盘”，选中需要擦除的硬盘，点击“擦除”图标，二次确认擦除，选择“快速”模式即可。</p><p>重复上述步骤，将所有要放入 ZFS 存储池的磁盘都擦除。</p><h3 id="创建存储池"><a href="#创建存储池" class="headerlink" title="创建存储池"></a>创建存储池</h3><p>点击左侧“存储器”、“zfs”、“池”，点击加号图标，选择“添加池”一项，进入创建存储池页面。</p><p>在创建存储池页面：</p><ul><li>名称：存储池的名称，根据个人喜好，我这里叫 <code>main</code>；</li><li>池类型：RAID 类型，通常根据磁盘数量选择，磁盘应当是同品牌、同型号、同大小的。我这里只有 2 块盘，所以选择“镜像”；</li><li>设备：勾选上一步中擦除过的设备；</li><li>挂载点：可以留空，系统会自动设置，也可以根据习惯自行设置；</li><li>设备别名：“以 ID”，不要改；</li><li>强制创建：磁盘大小不同时才需要，这里不勾选；</li><li>设置ashift：注释都说了不要改；</li><li>压缩：可以勾上，压缩类型选默认的“zf4”就好，不会占用太多资源。</li></ul><p>点击“保存”按钮创建存储池，二次确认应用设置。可以看到存储池已经在列表中了，挂载点是 <code>/main</code>，可以用命令行访问这个目录看看。</p><h3 id="创建数据集"><a href="#创建数据集" class="headerlink" title="创建数据集"></a>创建数据集</h3><p>OMV 里面，ZFS 的数据集被称作“文件系统”。点击左侧“存储器”、“zfs”、“池”，勾选刚刚创建的存储池，点击加号图标，选择“添加文件系统快照卷”选项。</p><p>PS：这里的“添加文件系统快照卷”指的是“添加文件系统、快照、卷”，并不存在某个东西叫“文件系统快照卷”……</p><p>在弹出的对话框里：</p><ul><li>类型：选择“文件系统”，即数据集；</li><li>前缀：存储池的名称，不需要修改；</li><li>名称：根据需要起名，我这里叫 <code>test</code>；</li><li>挂载点：同样可以留空。</li></ul><p>点击“保存”按钮创建数据集，二次确认应用设置。可以看到数据卷已经在列表中了，挂载点是 <code>/main/test</code>，可以用命令行访问这个目录看看。</p><h2 id="设置共享"><a href="#设置共享" class="headerlink" title="设置共享"></a>设置共享</h2><p>设置好共享后，就可以在局域网内访问 NAS 上的存储空间了。我的主力机器是 Windows 的，这里主要介绍 SMB 协议的共享。</p><h3 id="调整存储池-ACL-设置"><a href="#调整存储池-ACL-设置" class="headerlink" title="调整存储池 ACL 设置"></a>调整存储池 ACL 设置</h3><p>ZFS 插件默认禁用了 ACL 权限控制，这会对之后共享文件夹的设置产生一定的影响，需要手动开启。</p><p>点击左侧“存储器”、“zfs”、“池”，选中之前创建的存储池，点击“特性”图标，进入特性页面。修改以下几个参数：</p><ul><li>aclmode：改为 <code>groupmask</code>；</li><li>aclinherit：确认为 <code>restricted</code>；</li><li>acltype：改为 <code>posix</code>。</li></ul><p>上面这些修改都需要先选中修改项，再到上方点击“编辑”按钮，然后再手动输入值，保存。</p><h3 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h3><p>为了访问共享文件，我们需要创建一个新用户。点击左侧“用户”、“用户”，点击“新建|导入”图标，选择“创建”项。填入以下信息：</p><ul><li>用户名：自己选择一个用户名，这里使用 <code>asdf</code>；</li><li>密码：自己选择一个密码；</li><li>用户组：留空即可，系统会自动加入 <code>users</code> 用户组。</li></ul><p>点击保存，二次确认应用，即可看到新建的用户出现在列表之中。</p><h3 id="设置共享文件夹和权限"><a href="#设置共享文件夹和权限" class="headerlink" title="设置共享文件夹和权限"></a>设置共享文件夹和权限</h3><p>点击左侧“存储器”、“共享文件夹”，点击“创建”图标。</p><p>在打开的页面中，设置如下参数：</p><ul><li>名称：共享文件夹的名称，可以和数据集保持一致；</li><li>文件系统：选择之前创建的数据集；</li><li>相对路径：选择共享文件夹本身，显示出来应当是 <code>/</code>；</li><li>权限：默认即可，或根据自己需要修改；</li></ul><p>点击保存，二次确认应用，即可看到创建的共享文件夹出现于列表之中。</p><p>选中刚刚创建的共享文件夹，点击“访问控制列表”按钮，在进入的页面中：</p><ul><li>找到刚刚创建的 <code>asdf</code> 用户，将之权限改为“读&#x2F;写”；</li><li>将下方的所有者从root改为admin；<ul><li>OMV 其他文件系统默认的所有者即是 <code>admin</code>，推荐手动调整一下；</li></ul></li><li>将用户组的权限改为“读&#x2F;写&#x2F;执行”；</li><li>勾选下方的“取代”和“递归”选项。</li></ul><p>点击保存即可。</p><h3 id="设置-SMB-共享"><a href="#设置-SMB-共享" class="headerlink" title="设置 SMB 共享"></a>设置 SMB 共享</h3><p>点击左侧“服务”、“SMB”、“设置”，勾选“已启动”项。点击下方保存，二次确认应用，即可打开 SMB 服务。</p><p>点击左侧“服务”、“SMB”、“共享”，点击“创建”按钮，设置如下项：</p><ul><li>共享文件夹：选择刚才创建的共享文件夹；</li><li>公开：选择“否”或者“允许访客”均可；</li><li>勾选“继承ACL”、“继承权限”。</li></ul><p>点击保存，二次确认应用，SMB 设置就 OK 了。</p><h3 id="连接和测试"><a href="#连接和测试" class="headerlink" title="连接和测试"></a>连接和测试</h3><p>在本地机器上，打开 Windows 资源管理器，通过以下两种方法之一访问：</p><ul><li>打开“网络”文件夹，找到“OPENMEDIAVAULT”（安装时设置的主机名）项目，双击进入；</li><li>在地址栏中输入 <code>\\&lt;your_nas_ip&gt;</code>（两个反斜杠 + IP地址），按回车进入。</li></ul><p>随后会弹出窗口请求用户名和密码，输入此前创建的用户即可登录。</p><p>尝试复制文件到 NAS，或者从 NAS 复制文件，速度能够基本跑满千兆以太网。</p><h2 id="结语-1"><a href="#结语-1" class="headerlink" title="结语"></a>结语</h2><p>到这一步，NAS 算是达到一个可用的状态了，同样是非常麻烦。部署 ZFS 文件系统踩了巨大多的坑。</p><h1 id="Openmediavault-通过-Docker-部署-qBittorrent"><a href="#Openmediavault-通过-Docker-部署-qBittorrent" class="headerlink" title="Openmediavault 通过 Docker 部署 qBittorrent"></a>Openmediavault 通过 Docker 部署 qBittorrent</h1><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>点击左侧“系统”、“omv-extras”、“Docker”，点击“安装”按钮，开始安装进程。安装完成后，回到同一界面，应该能看到提示状态是“已安装、运行中”，版本号应当不低于 20.10.17。</p><p>如果发现版本号低于 20.10.17，请点击“移除”按钮，移除当前版本的 Docker。使用 ssh 连接到服务器，运行下面的命令安装 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><h3 id="Docker-Hub-镜像加速"><a href="#Docker-Hub-镜像加速" class="headerlink" title="Docker Hub 镜像加速"></a>Docker Hub 镜像加速</h3><p>推荐添加阿里云、中国科大的容器镜像，以加快 Docker Hub 上的镜像拉取速度。编辑 <code>/etc/docker/daemon.json</code> 这个文件，在其中添加如下一项：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://ustc-edu-cn.mirror.aliyuncs.com/&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>修改后的文件形如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data-root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://ustc-edu-cn.mirror.aliyuncs.com/&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后重启 Docker 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure><h3 id="踩到的坑与捉到的虫"><a href="#踩到的坑与捉到的虫" class="headerlink" title="踩到的坑与捉到的虫"></a>踩到的坑与捉到的虫</h3><blockquote><p>这段内容可以略过:)</p></blockquote><p>我当初用上面的办法安装好 Docker 之后，发现我没有办法启动任何 Docker 容器，会报如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ceba@openmediavault:~$ sudo docker start portainer</span><br><span class="line">Error response from daemon: AppArmor enabled on system but the docker-default profile could not be loaded: running `apparmor_parser apparmor_parser --version` failed with output:</span><br><span class="line">error: <span class="built_in">exec</span>: <span class="string">&quot;apparmor_parser&quot;</span>: executable file not found <span class="keyword">in</span> <span class="variable">$PATH</span></span><br><span class="line">Error: failed to start containers: portainer</span><br></pre></td></tr></table></figure><p>我寻找了许多材料、尝试了许多办法来解决这个问题，包括缺少安装 apparmor，但都无济于事。后来找到了<a href="https://forum.openmediavault.org/index.php?thread/43606-can-t-run-docker-containers-after-upgrade-to-v6-apparmor-missing/">这篇帖子</a>，发现到我通过 OMV-Extras 插件安装的是一个巨大古老的 Docker 版本（v20.10.5）。于是根据帖子提示，手动执行了安装命令，终于解决了这一问题。</p><p>但我还是很好奇为啥会装上这么古老的 Docker。我检查了 OMV-Extras 安装 Docker 时的输出，发现这个家伙竟然是从 Debian 源安装 <code>docker.io</code>，而不是从 Docker 源安装 <code>docker-ce</code>，前者已经是上古时代的东西了。</p><p>我在 OMV-extras 的<a href="https://github.com/OpenMediaVault-Plugin-Developers/openmediavault-omvextrasorg">仓库</a>翻了翻，发现了下面<a href="https://github.com/OpenMediaVault-Plugin-Developers/openmediavault-omvextrasorg/blob/731ce1884477e47635a41a09280a1a9844632e32/usr/sbin/omv-installdocker#L74-L84">这段代码</a>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">setDockerPackages()</span> </span><br><span class="line">&#123; </span><br><span class="line">  <span class="string">if</span> [[ <span class="string">&quot;$&#123;arch&#125;&quot;</span> <span class="string">==</span> <span class="string">&quot;i386&quot;</span> ]] <span class="string">||</span> <span class="string">!</span> <span class="string">grep</span> <span class="string">-q</span> <span class="string">&#x27;download.docker.com&#x27;</span> <span class="string">$</span>&#123;<span class="string">omvextrasList</span>&#125;<span class="string">;</span> <span class="string">then</span> </span><br><span class="line">    <span class="comment"># there is no i386 docker-ce package in the docker repos </span></span><br><span class="line">    <span class="comment"># if docker repos are disabled, use debian repos as well </span></span><br><span class="line">    <span class="comment"># use docker.io from Debian repo </span></span><br><span class="line">    <span class="string">dockerPackages=&quot;docker.io</span> <span class="string">docker-compose</span> <span class="string">$</span>&#123;<span class="string">dockerPackages</span>&#125;<span class="string">&quot; </span></span><br><span class="line"><span class="string">  else </span></span><br><span class="line"><span class="string">    dockerPackages=&quot;</span><span class="string">docker-ce</span> <span class="string">$</span>&#123;<span class="string">dockerPackages</span>&#125;<span class="string">&quot; </span></span><br><span class="line"><span class="string">  fi </span></span><br><span class="line"><span class="string">&#125; </span></span><br></pre></td></tr></table></figure><p>这段代码竟然直接根据源列表中是否含有 <code>download.docker.com</code> 这个字符串来决定 Docker 包名……我之前更换 OMV-extras 软件源的时候就修改了 Docker 的镜像仓库，清华 TUNA 源里显然并不包含 <code>download.docker.com</code> 这个字符串，于是 OMV-extras 就以为没有 Docker 源，选择了从 Debian 源安装。</p><p>真相大白，于是跑去写了个 <a href="https://github.com/OpenMediaVault-Plugin-Developers/openmediavault-omvextrasorg/issues/74">Issue</a>。很快啊，不到二十分钟，人家就修完提交了，顺带也把 Issue 关掉了。</p><p>现在大概是没有这个 bug 了。</p><h2 id="部署-qBittorrent"><a href="#部署-qBittorrent" class="headerlink" title="部署 qBittorrent"></a>部署 qBittorrent</h2><p>我们使用 linuxserver 制作的 <a href="https://hub.docker.com/r/linuxserver/qbittorrent">linuxserver&#x2F;qbittorrent</a> 镜像，使用 docker compose 部署。</p><p>通过 ssh 登入服务器，拉取 linuxserver&#x2F;qbittorrent 镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull linuxserver/qbittorrent:4.4.1</span><br></pre></td></tr></table></figure><p>然后在主目录下建立 <code>qbittorrent</code> 文件夹，在其中建立 <code>docker-compose.yml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;2.1&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">qbittorrent:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">linuxserver/qbittorrent:4.4.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">qbittorrent</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=998</span>            <span class="comment"># 数据卷所有者的 id</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=100</span>            <span class="comment"># 数据卷所属用户组的 id</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span>    <span class="comment"># 时区</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WEBUI_PORT=8080</span>     <span class="comment"># Web 界面端口，须和下方保持一致</span></span><br><span class="line">    <span class="attr">volumes:</span>                <span class="comment"># 数据卷挂载，帽号前面是宿主机，帽号后面是容器内</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/main/test/qbittorrent-config:/config</span>   <span class="comment"># 配置文件目录，根据需要修改帽号前内容</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/main/test/downloads:/downloads</span>         <span class="comment"># 下载文件目录，根据需要修改帽号前内容</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span>           <span class="comment"># Web 界面端口，须和上方保持一致</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">26881</span><span class="string">:26881</span>         <span class="comment"># BT/PT 下载用通信端口，根据需要设置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">26881</span><span class="string">:26881/udp</span>     <span class="comment"># BT/PT 下载用通信端口，根据需要设置</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span>      <span class="comment"># 网络模式，改为 host 模式</span></span><br></pre></td></tr></table></figure><p>这里我们选择了 qBittorrent 的 4.4.1 版本，它是 linux 下最后一个使用 Qt5 的版本。随后的版本使用了 Qt 6.3.0，但这个版本的 Qt6 存在 bug 导致 RSS 订阅功能不可用。最新的 qBittorrent 4.4.3 尚未更换 Qt 版本，只能先用这个较老的版本凑活凑活了。</p><p><code>PUID</code>、<code>PGID</code> 是用于解决挂载数据卷权限问题的两个环境变量，PUID 设为数据卷所有者的 id，PGID 设为数据卷所属用户组的 id。在这里，数据卷所有者之前已改为 <code>admin</code>，id 是 998；用户组是 <code>users</code>，id 是 <code>100</code>。可以通过 <code>id user</code> 命令来查看。</p><p>数据卷理论上可以挂载到任意位置，但通常都是会放在文件系统之中的，相对更加安全一些。这里就放在了 test 数据集下面的两个目录里。</p><p>网络模式强烈改为 <code>host</code> 模式，这样就会直接使用主机网卡，好处多多：可以直接使用 IPv6 地址，不用再碰 Docker 糟糕的 IPv6 支持；少过一层虚拟网卡，性能更好，连接性更优。PS：我当初找了一堆资料研究 Docker 怎么开 IPv6，后来发现用 host 模式直接解决了。</p><p>准备好 <code>docker-compose.yml</code> 文件后，在它所在的目录下（即 <code>qbittorrent</code>）运行下面的指令，启动编组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>然后就可以打开浏览器，访问 <code>&lt;your_nas_ip&gt;:8080</code> 来看看能否打开 qBittorrent 的界面啦。默认的登陆用户是 <code>admin</code>，密码是 <code>adminadmin</code>。</p><p>登录进去之后就可以随便玩耍了，随便塞个新番的 BT 种子试试看。</p><h2 id="修改-Hosts"><a href="#修改-Hosts" class="headerlink" title="修改 Hosts"></a>修改 Hosts</h2><p>考虑到网络环境，有必要给一些 BT、PT 网站手动设置 Hosts。<code>/etc/hosts</code> 这个文件是由 OMV 自动管理的，需要稍稍绕点弯路。</p><p>首先新建 <code>/etc/hosts2</code> 文件，里面填好需要设置的 Hosts 内容。然后再新建文件 <code>/srv/salt/omv/deploy/hosts/20myentries.sls</code>，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">append_custom_hosts:</span><br><span class="line">    file.append:</span><br><span class="line">        - name: <span class="string">&quot;/etc/hosts&quot;</span></span><br><span class="line">        - <span class="built_in">source</span>: <span class="string">&quot;/etc/hosts2&quot;</span></span><br></pre></td></tr></table></figure><p>随后运行 <code>sudo omv-salt deploy run hosts</code> 命令，即可使上面的设置生效。可以再次查看 <code>/etc/hosts</code> 文件，<code>hosts2</code> 的内容应该已经填充到其中了。</p><h2 id="结语-2"><a href="#结语-2" class="headerlink" title="结语"></a>结语</h2><p>在完成 qBittorrent 的部署之后，openmediavault 的折腾之旅算是告一段落了。本来还应该折腾折腾虚拟化，但实在使不想搞了。希望这几篇文章能给想要使用 OMV 的同学一些帮助，让大家少踩一些坑。</p>]]></content>
    
    
    <summary type="html">omv,docker,nas,os</summary>
    
    
    
    <category term="tools" scheme="https://macin.top/categories/tools/"/>
    
    <category term="docker" scheme="https://macin.top/categories/tools/docker/"/>
    
    <category term="os" scheme="https://macin.top/categories/os/"/>
    
    <category term="omv" scheme="https://macin.top/categories/os/omv/"/>
    
    
    <category term="docker" scheme="https://macin.top/tags/docker/"/>
    
    <category term="os" scheme="https://macin.top/tags/os/"/>
    
    <category term="omv" scheme="https://macin.top/tags/omv/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu的重定向输出功能</title>
    <link href="https://macin.top/posts/e435522b/"/>
    <id>https://macin.top/posts/e435522b/</id>
    <published>2025-01-11T15:19:28.000Z</published>
    <updated>2025-02-28T15:34:31.958Z</updated>
    
    <content type="html"><![CDATA[<p>在 Ubuntu 中， <code>&gt;</code> 符号主要用于<strong>重定向输出</strong>，它会将命令的输出结果发送到指定的文件或设备，而不是默认的标准输出（通常是终端屏幕）。</p><p>这里详细解释 <code>&gt;</code> 的用法，并提供一些示例：</p><p><strong>基本用法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &gt; file</span><br></pre></td></tr></table></figure><ul><li><strong><code>command</code></strong>: 你要执行的命令。</li><li><strong><code>&gt;</code></strong>: 重定向操作符。</li><li><strong><code>file</code></strong>: 你要写入输出的目标文件。</li></ul><p><strong>工作原理：</strong></p><ol><li><strong>执行 <code>command</code></strong>: Ubuntu 首先执行 <code>command</code>。</li><li><strong>捕获输出</strong>: <code>command</code> 的标准输出（通常是屏幕上显示的内容）会被捕获。</li><li>重定向到文件<code>&gt;</code>操作符将捕获的输出重定向到<code>file</code><ul><li>如果 <code>file</code> 不存在，则会创建该文件。</li><li>如果 <code>file</code> 已经存在，则会<strong>覆盖</strong>该文件的内容。</li></ul></li></ol><p><strong>示例：</strong></p><ol><li><p><strong>将 <code>ls -l</code> 的输出保存到文件 <code>directory_listing.txt</code> 中：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l &gt; directory_listing.txt</span><br></pre></td></tr></table></figure><p>执行此命令后，终端屏幕上不会显示 <code>ls -l</code> 的输出，而是将输出内容写入到 <code>directory_listing.txt</code> 文件中。你可以使用 <code>cat directory_listing.txt</code> 命令查看文件内容。</p></li><li><p><strong>将字符串写入文件 <code>my_message.txt</code>：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello, world!&quot;</span> &gt; my_message.txt</span><br></pre></td></tr></table></figure><p>这会将 “Hello, world!” 写入到 <code>my_message.txt</code> 文件中。</p></li><li><p><strong>覆盖现有文件：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the first line.&quot;</span> &gt; my_file.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is the second line.&quot;</span> &gt; my_file.txt</span><br></pre></td></tr></table></figure><p>执行上面的命令后，<code>my_file.txt</code> 文件中只会包含 “This is the second line.”，因为第一次写入的内容被第二次写入的内容覆盖了。</p></li></ol><p><strong>重要提示：</strong></p><ul><li><strong>覆盖风险：</strong> <code>&gt;</code> 操作符会覆盖目标文件（如果存在）。如果你想在文件末尾追加内容而不是覆盖，应该使用 <code>&gt;&gt;</code> 操作符（下面会介绍）。</li><li><strong>权限：</strong> 如果你没有写入目标文件的权限，重定向操作会失败。</li><li><strong>标准错误：</strong> <code>&gt;</code> 只重定向标准输出，不会重定向标准错误。如果想重定向标准错误，需要使用 <code>2&gt;</code> 操作符（下面会介绍）。</li></ul><p><strong>其他相关操作符：</strong></p><ol><li><p><strong><code>&gt;&gt;</code> (追加输出):</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &gt;&gt; file</span><br></pre></td></tr></table></figure><p>与 <code>&gt;</code> 类似，但它会将输出<strong>追加</strong>到目标文件末尾，而不是覆盖。如果文件不存在，则会创建。</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;First line.&quot;</span> &gt;&gt; my_log.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Second line.&quot;</span> &gt;&gt; my_log.txt</span><br></pre></td></tr></table></figure><p><code>my_log.txt</code> 文件中会包含两行内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">First line.</span><br><span class="line">Second line.</span><br></pre></td></tr></table></figure></li><li><p><strong><code>2&gt;</code> (重定向标准错误):</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> 2&gt; error_file</span><br></pre></td></tr></table></figure><p><code>2&gt;</code> 操作符会将命令的<strong>标准错误</strong>（通常是错误信息）重定向到 <code>error_file</code>。</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> non_existent_file 2&gt; error.log</span><br></pre></td></tr></table></figure><p>如果 <code>non_existent_file</code> 不存在，<code>ls</code> 命令会产生错误信息，该错误信息会被写入到 <code>error.log</code> 文件中，而不是显示在终端屏幕上。</p></li><li><p><strong><code>&amp;&gt;</code> 或 <code>&gt;&amp;</code> (重定向标准输出和标准错误):</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &amp;&gt; output.log</span><br><span class="line"><span class="built_in">command</span> &gt;&amp; output.log</span><br></pre></td></tr></table></figure><p>这两个操作符会将命令的<strong>标准输出和标准错误</strong>都重定向到 <code>output.log</code> 文件中。</p></li><li><p><code>2&gt;&amp;1</code>将<strong>标准错误 (stderr)</strong> 重定向到与<strong>标准输出 (stdout)</strong> 相同的位置。</p></li></ol><ul><li><strong><code>2</code></strong>: 代表标准错误 (stderr) 的文件描述符。在 Unix 系统中，标准错误通常用于输出错误信息。</li><li><strong><code>&gt;</code></strong>: 是重定向操作符，表示将输出重定向到指定的目标。</li><li><strong><code>&amp;1</code></strong>: <code>&amp;</code> 符号表示后面的数字是一个文件描述符，而不是一个文件名。<code>1</code> 代表标准输出 (stdout) 的文件描述符。</li></ul><p><strong>组合起来，<code>2&gt;&amp;1</code> 的含义是：</strong></p><p>“将标准错误（文件描述符 2）重定向到与标准输出（文件描述符 1）相同的位置。”</p><p><strong>工作原理和应用场景：</strong></p><ol><li><strong>默认情况：</strong><ul><li>默认情况下，标准输出 (stdout) 会输出到终端屏幕，而标准错误 (stderr) 也会输出到终端屏幕。</li><li>如果一个命令既有正常输出，又有错误信息，它们都会混杂地显示在终端上。</li></ul></li><li><strong>使用 <code>2&gt;&amp;1</code>：</strong><ul><li>通过使用 <code>2&gt;&amp;1</code>，你可以将标准错误信息与标准输出信息合并到同一个输出流中。</li><li>这意味着你可以将所有输出（包括正常输出和错误信息）重定向到同一个文件，或者通过管道传递给其他命令进行处理。</li></ul></li></ol><p><strong>示例：</strong></p><p>假设你有一个命令 <code>my_script.sh</code>，它可能会产生标准输出和标准错误。</p><ol><li><p><strong>默认情况 (不使用重定向):</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./my_script.sh</span><br></pre></td></tr></table></figure><p>该命令的输出（包括标准输出和标准错误）都会显示在终端屏幕上，可能会混杂在一起。</p></li><li><p><strong>将标准输出重定向到 <code>output.txt</code>，但标准错误仍然输出到终端：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./my_script.sh &gt; output.txt</span><br></pre></td></tr></table></figure><p>标准输出被写入到 <code>output.txt</code> 文件中，但标准错误仍然会显示在终端屏幕上。</p></li><li><p><strong>将标准输出重定向到 <code>output.txt</code>，并将标准错误也重定向到 <code>output.txt</code>：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./my_script.sh &gt; output.txt 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>或者，也可以使用 <code>&amp;&gt;</code> 或 <code>&gt;&amp;</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./my_script.sh &amp;&gt; output.txt</span><br><span class="line">./my_script.sh &gt;&amp; output.txt</span><br></pre></td></tr></table></figure><p>现在，标准输出和标准错误都会被写入到 <code>output.txt</code> 文件中。</p></li><li><p><strong>将标准输出和标准错误都通过管道传递给 <code>grep</code> 命令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./my_script.sh 2&gt;&amp;1 | grep <span class="string">&quot;error&quot;</span></span><br></pre></td></tr></table></figure><p>这个命令将 <code>my_script.sh</code> 的所有输出（包括错误信息）传递给 <code>grep</code> 命令，<code>grep</code> 会过滤出包含 “error” 的行，并显示在终端屏幕上。</p></li></ol><p><strong>重要提示：</strong></p><ul><li>顺序很重要：在重定向时，<code>2&gt;&amp;1</code>必须在重定向到文件的操作之后。例如:<ul><li><code>command &gt; output.txt 2&gt;&amp;1</code> (正确)</li><li><code>command 2&gt;&amp;1 &gt; output.txt</code> (错误，可能不会按照预期工作)</li></ul></li><li><strong><code>&amp;&gt;</code> 或 <code>&gt;&amp;</code> 语法更简洁：</strong> 在现代的 bash shell 中，<code>&amp;&gt;</code> 和 <code>&gt;&amp;</code> 是 <code>&gt; file 2&gt;&amp;1</code> 的简写形式，更方便使用。</li></ul><p><strong>总结：</strong></p><p><code>2&gt;&amp;1</code> 是一个非常有用的操作符，它可以让你将标准错误和标准输出合并，方便你统一处理命令的所有输出。这在需要将所有输出写入文件、通过管道传递给其他命令或者进行错误分析时非常有用。理解 <code>2&gt;&amp;1</code> 的工作原理可以帮助你更有效地使用 Linux 命令行。</p>]]></content>
    
    
    <summary type="html">centos,debian,ubuntu,kali</summary>
    
    
    
    <category term="os" scheme="https://macin.top/categories/os/"/>
    
    <category term="kali" scheme="https://macin.top/categories/os/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/categories/os/ubuntu/"/>
    
    <category term="centos" scheme="https://macin.top/categories/os/centos/"/>
    
    <category term="debian" scheme="https://macin.top/categories/os/debian/"/>
    
    
    <category term="os" scheme="https://macin.top/tags/os/"/>
    
    <category term="kali" scheme="https://macin.top/tags/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/tags/ubuntu/"/>
    
    <category term="debian" scheme="https://macin.top/tags/debian/"/>
    
    <category term="centos" scheme="https://macin.top/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu安装ssh</title>
    <link href="https://macin.top/posts/63ab82a5/"/>
    <id>https://macin.top/posts/63ab82a5/</id>
    <published>2025-01-10T13:19:21.000Z</published>
    <updated>2025-02-28T15:34:31.957Z</updated>
    
    <content type="html"><![CDATA[<p>要在Ubuntu上安装SSH服务器，你可以按照以下步骤进行：</p><ol><li><p><strong>更新包列表</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure></li><li><p><strong>安装OpenSSH服务器</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install openssh-server</span><br></pre></td></tr></table></figure></li><li><p><strong>检查SSH服务状态</strong>: 安装完成后，SSH服务会自动启动。你可以使用以下命令检查SSH服务的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status ssh</span><br></pre></td></tr></table></figure></li><li><p><strong>启动SSH服务</strong>（如果未自动启动）:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start ssh</span><br></pre></td></tr></table></figure></li><li><p><strong>设置SSH服务开机自启动</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> ssh</span><br></pre></td></tr></table></figure></li></ol><p>完成这些步骤后，你的Ubuntu系统应该已经成功安装并运行了SSH服务器。你可以使用SSH客户端连接到你的Ubuntu系统，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@your_server_ip</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">debian,ubuntu,kali,os</summary>
    
    
    
    <category term="os" scheme="https://macin.top/categories/os/"/>
    
    <category term="kali" scheme="https://macin.top/categories/os/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/categories/os/ubuntu/"/>
    
    <category term="debian" scheme="https://macin.top/categories/os/debian/"/>
    
    
    <category term="os" scheme="https://macin.top/tags/os/"/>
    
    <category term="kali" scheme="https://macin.top/tags/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/tags/ubuntu/"/>
    
    <category term="debian" scheme="https://macin.top/tags/debian/"/>
    
    <category term="linux" scheme="https://macin.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux常用命令</title>
    <link href="https://macin.top/posts/fe4ef317/"/>
    <id>https://macin.top/posts/fe4ef317/</id>
    <published>2025-01-10T11:52:00.000Z</published>
    <updated>2025-02-28T15:34:31.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu-debian包管理命令"><a href="#ubuntu-debian包管理命令" class="headerlink" title="ubuntu&#x2F;debian包管理命令"></a>ubuntu&#x2F;debian包管理命令</h1><p><strong>更新系统所有</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><p><strong>更新现有软件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt upgrade -y</span><br></pre></td></tr></table></figure><p><strong>更新软件依赖关系****更新现有软件删除依赖以外的软件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt full-upgrade -y</span><br></pre></td></tr></table></figure><p><strong>安装或更新指定软件如：curl wget</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y curl wget</span><br></pre></td></tr></table></figure><p><strong>删除指定软件****如：curl wget</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt remove -y curl wget</span><br><span class="line"></span><br><span class="line">apt purge -y curl wget</span><br></pre></td></tr></table></figure><h1 id="Alpine-Linux包管理命令"><a href="#Alpine-Linux包管理命令" class="headerlink" title="Alpine Linux包管理命令"></a>Alpine Linux包管理命令</h1><p><strong>更新系统所有</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk update</span><br></pre></td></tr></table></figure><p><strong>更新现有软件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk upgrade</span><br></pre></td></tr></table></figure><p><strong>安装或更新指定软件如：curl docker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add curl docker</span><br></pre></td></tr></table></figure><p><strong>删除指定软件****如：curl wget</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk del wget</span><br></pre></td></tr></table></figure><h1 id="CentOS包管理命令"><a href="#CentOS包管理命令" class="headerlink" title="CentOS包管理命令"></a>CentOS包管理命令</h1><p><strong>更新系统所有</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><p><strong>安装或更新指定软件如：curl wget</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y curl wget</span><br></pre></td></tr></table></figure><p><strong>删除指定软件****如：curl wget</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove -y curl wget</span><br></pre></td></tr></table></figure><h1 id="文件管理相关"><a href="#文件管理相关" class="headerlink" title="文件管理相关"></a>文件管理相关</h1><p><strong>查看home目录下内容</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /home/</span><br></pre></td></tr></table></figure><p><strong>进入home目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home</span><br></pre></td></tr></table></figure><p><strong>创建web目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> web</span><br></pre></td></tr></table></figure><p><strong>创建空nginx.conf文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> nginx.conf</span><br></pre></td></tr></table></figure><p><strong>编辑docker-compose.yml文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano docker-compose.yml</span><br></pre></td></tr></table></figure><p><strong>压缩&#x2F;home&#x2F;web目录，压缩包存放到当前目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf web.tar.gz /home/web</span><br></pre></td></tr></table></figure><p><strong>当前目录解压web.tar.gz文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf web.tar.gz</span><br></pre></td></tr></table></figure><p><strong>删除home&#x2F;web目录下所有内容</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r /home/web/*</span><br></pre></td></tr></table></figure><p><strong>删除&#x2F;home&#x2F;web.tar.gz文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> /home/web.tar.gz</span><br></pre></td></tr></table></figure><p><strong>下载maccms10.zip文件到当前目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/magicblack/maccms_down/raw/master/maccms10.zip</span><br></pre></td></tr></table></figure><p><strong>移动home&#x2F;web目录下所有文件到root目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> /home/web/* /root/</span><br></pre></td></tr></table></figure><p><strong>拷贝home&#x2F;web目录到root</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r /home/web /root</span><br></pre></td></tr></table></figure><p><strong>拷贝home&#x2F;web目录下的test.txt到root</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /home/web/test.txt /root</span><br></pre></td></tr></table></figure><p><strong>赋予&#x2F;var&#x2F;www&#x2F;html最高读写权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R 777 /var/www/html</span><br></pre></td></tr></table></figure><p><strong>将home目录下的test.txt改名成root.txt</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> /home/test.txt /home/root.txt</span><br></pre></td></tr></table></figure><p><strong>将root.txt中所有的test替换成root</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/test/root/g&#x27;</span> root.txt</span><br></pre></td></tr></table></figure><p><strong>将root.txt文件所有内容删除添加一行文本root&#x3D;12345保存退出</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /home/root.txt &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root=12345</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p><strong>在root.txt文本中末尾添加一行end&#x3D;yyds</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;end=yyds&quot;</span> &gt;&gt; root.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">centos,ubuntu,os,debian,kali,linux</summary>
    
    
    
    <category term="os" scheme="https://macin.top/categories/os/"/>
    
    <category term="kali" scheme="https://macin.top/categories/os/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/categories/os/ubuntu/"/>
    
    <category term="centos" scheme="https://macin.top/categories/os/centos/"/>
    
    <category term="debian" scheme="https://macin.top/categories/os/debian/"/>
    
    
    <category term="os" scheme="https://macin.top/tags/os/"/>
    
    <category term="kali" scheme="https://macin.top/tags/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/tags/ubuntu/"/>
    
    <category term="debian" scheme="https://macin.top/tags/debian/"/>
    
    <category term="centos" scheme="https://macin.top/tags/centos/"/>
    
    <category term="linux" scheme="https://macin.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>debian和ubuntu,centos系统一键更新清理,系统效率再提升</title>
    <link href="https://macin.top/posts/6fea1a3a/"/>
    <id>https://macin.top/posts/6fea1a3a/</id>
    <published>2025-01-09T15:29:12.000Z</published>
    <updated>2025-02-28T15:34:31.949Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Debian，Ubuntu</strong></p><p><strong>查看系统启动时间</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemd-analyze</span><br></pre></td></tr></table></figure><p><strong>一键纯净更新</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update -y &amp;&amp; apt full-upgrade -y &amp;&amp; apt autoremove -y &amp;&amp; apt autoclean -y</span><br></pre></td></tr></table></figure><p><strong>安装常用工具</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y curl wget sudo</span><br></pre></td></tr></table></figure><p><strong>一键清理垃圾</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo apt autoremove --purge -y</span><br><span class="line"></span><br><span class="line">sudo apt clean -y</span><br><span class="line"></span><br><span class="line">sudo apt autoclean -y</span><br><span class="line"></span><br><span class="line">sudo apt remove --purge $(dpkg -l | awk <span class="string">&#x27;/^rc/ &#123;print $2&#125;&#x27;</span>) -y</span><br><span class="line"></span><br><span class="line">sudo journalctl --rotate</span><br><span class="line"></span><br><span class="line">sudo journalctl --vacuum-time=1s</span><br><span class="line"></span><br><span class="line">sudo journalctl --vacuum-size=50M</span><br><span class="line"></span><br><span class="line">sudo apt remove --purge $(dpkg -l | awk <span class="string">&#x27;/^ii linux-(image|headers)-[^ ]+/&#123;print $2&#125;&#x27;</span> | grep -v $(<span class="built_in">uname</span> -r | sed <span class="string">&#x27;s/-.*//&#x27;</span>) | xargs) -y</span><br></pre></td></tr></table></figure><p><strong>查看Debian版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/debian_version</span><br></pre></td></tr></table></figure><p><strong>查看Ubuntu版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/lsb-release</span><br></pre></td></tr></table></figure><p><strong>CentOS</strong></p><p>应广大CentOS 用户要求 哈哈 下面是CentOS命令</p><p><strong>查看系统启动时间</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemd-analyze</span><br></pre></td></tr></table></figure><p><strong>一键纯净更新</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update -y &amp;&amp; yum upgrade -y &amp;&amp; yum autoremove -y &amp;&amp; yum clean all</span><br></pre></td></tr></table></figure><p><strong>一键清理垃圾</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo yum autoremove</span><br><span class="line"></span><br><span class="line">sudo yum clean all</span><br><span class="line"></span><br><span class="line">sudo journalctl --rotate</span><br><span class="line"></span><br><span class="line">sudo journalctl --vacuum-time=1s</span><br><span class="line"></span><br><span class="line">sudo journalctl --vacuum-size=50M</span><br><span class="line"></span><br><span class="line">sudo yum remove $(rpm -qa kernel | grep -v $(<span class="built_in">uname</span> -r))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>查看CentOS版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/centos-release</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">centos,debian,ubuntu,kali</summary>
    
    
    
    <category term="os" scheme="https://macin.top/categories/os/"/>
    
    <category term="kali" scheme="https://macin.top/categories/os/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/categories/os/ubuntu/"/>
    
    <category term="centos" scheme="https://macin.top/categories/os/centos/"/>
    
    <category term="debian" scheme="https://macin.top/categories/os/debian/"/>
    
    
    <category term="os" scheme="https://macin.top/tags/os/"/>
    
    <category term="kali" scheme="https://macin.top/tags/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/tags/ubuntu/"/>
    
    <category term="debian" scheme="https://macin.top/tags/debian/"/>
    
    <category term="centos" scheme="https://macin.top/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>docker搭建duplicati备份本地硬盘和远程服务器数据</title>
    <link href="https://macin.top/posts/95c5fd9c/"/>
    <id>https://macin.top/posts/95c5fd9c/</id>
    <published>2025-01-08T12:11:40.000Z</published>
    <updated>2025-02-28T15:34:31.951Z</updated>
    
    <content type="html"><![CDATA[<p>官网地址：<a href="https://github.com/duplicati/duplicati">duplicati&#x2F;duplicati: Store securely encrypted backups in the cloud!</a></p><p>github项目地址：<a href="https://github.com/duplicati/duplicati">https://github.com/duplicati/duplicati</a></p><p>docker hub地址：<a href="https://hub.docker.com/r/linuxserver/duplicati">hub.docker.com&#x2F;r&#x2F;linuxserver&#x2F;duplicati</a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i <span class="comment"># 切换到root用户</span></span><br><span class="line"></span><br><span class="line">apt update -y  <span class="comment"># 升级packages</span></span><br><span class="line"></span><br><span class="line">apt install wget curl sudo vim git  <span class="comment"># Debian系统比较干净，安装常用的软件</span></span><br></pre></td></tr></table></figure><h1 id="安装-Docker-环境"><a href="#安装-Docker-环境" class="headerlink" title="安装 Docker 环境"></a>安装 Docker 环境</h1><p>安装 Docker（非大陆服务器）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- get.docker.com | bash</span><br><span class="line"></span><br><span class="line">docker -v  <span class="comment">#查看 docker 版本</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> docker  <span class="comment"># 设置开机自动启动</span></span><br></pre></td></tr></table></figure><h1 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#https://github.com/docker/compose/releases 要安装其他版本的 Compose，请替换 v2.32.2</span></span><br><span class="line">非大陆</span><br><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/2.32.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h1 id="添加可执行权限-x"><a href="#添加可执行权限-x" class="headerlink" title="添加可执行权限:x"></a>添加可执行权限:x</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h1 id="在-usr-bin-路径下创建软连接"><a href="#在-usr-bin-路径下创建软连接" class="headerlink" title="在&#x2F;usr&#x2F;bin&#x2F;路径下创建软连接"></a>在&#x2F;usr&#x2F;bin&#x2F;路径下创建软连接</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><h1 id="查看docker-compose版本"><a href="#查看docker-compose版本" class="headerlink" title="查看docker-compose版本"></a>查看docker-compose版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h1 id="创建一下安装的目录"><a href="#创建一下安装的目录" class="headerlink" title="创建一下安装的目录"></a>创建一下安装的目录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/duplicati</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/duplicati</span><br><span class="line"></span><br><span class="line">nano docker-compose.yml</span><br></pre></td></tr></table></figure><h1 id="docker-compose-yml（注意注释部分）"><a href="#docker-compose-yml（注意注释部分）" class="headerlink" title="docker-compose.yml（注意注释部分）"></a>docker-compose.yml（注意注释部分）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">services:</span><br><span class="line">  duplicati:</span><br><span class="line">    image: lscr.io/linuxserver/duplicati:latest</span><br><span class="line">    container_name: duplicati</span><br><span class="line">    environment:</span><br><span class="line">      - PUID=1000</span><br><span class="line">      - PGID=1000</span><br><span class="line">      - TZ=Etc/UTC</span><br><span class="line">      - SETTINGS_ENCRYPTION_KEY=88888888</span><br><span class="line">      - CLI_ARGS= <span class="comment">#optional</span></span><br><span class="line">      - DUPLICATI__WEBSERVICE_PASSWORD= <span class="comment">#optional</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /path/to/duplicati/config:/config</span><br><span class="line">      - /path/to/backups:/backups               <span class="comment">#/path/to/backups可以改成备份盘的地址</span></span><br><span class="line">      - /path/to/source:/source                 <span class="comment">#/path/to/source可以改成源数据的地址</span></span><br><span class="line">    ports:</span><br><span class="line">      - 8200:8200                               <span class="comment">#8200是访问端口号</span></span><br><span class="line">    restart: unless-stopped</span><br></pre></td></tr></table></figure><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>访问web界面：http:&#x2F;&#x2F;服务器ip:8200 </p><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入docker-compose所在的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/duplicati  </span><br><span class="line"></span><br><span class="line"><span class="comment">#停止容器，此时不会删除映射到本地的数据</span></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="comment">#完全删除映射到本地的数据</span></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/duplicati </span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>1、不知道服务器IP，可以直接在命令行输入：curl ip.sb，会显示当前服务器的IP。<br>2、遇到访问不了的情况，请在宝塔面板的防火墙和服务商的后台防火墙里打开对应端口。</p></blockquote><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#万事先备份，以防万一</span></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/duplicati /root/data/docker_data/duplicati.archive </span><br><span class="line"></span><br><span class="line"><span class="comment">#进入docker-compose所在的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/duplicati  </span><br><span class="line"></span><br><span class="line"><span class="comment">#拉取最新的镜像</span></span><br><span class="line">docker-compose pull    </span><br><span class="line"></span><br><span class="line"><span class="comment">#重新更新当前镜像</span></span><br><span class="line">docker-compose up -d   </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">duplicati,docker,tools</summary>
    
    
    
    <category term="tools" scheme="https://macin.top/categories/tools/"/>
    
    <category term="docker" scheme="https://macin.top/categories/tools/docker/"/>
    
    
    <category term="tools" scheme="https://macin.top/tags/tools/"/>
    
    <category term="docker" scheme="https://macin.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>openwrt安装docker和docker-compose</title>
    <link href="https://macin.top/posts/9c1c301c/"/>
    <id>https://macin.top/posts/9c1c301c/</id>
    <published>2025-01-08T11:24:15.000Z</published>
    <updated>2025-02-28T15:34:31.955Z</updated>
    
    <content type="html"><![CDATA[<p>更新软件包索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br></pre></td></tr></table></figure><p>安装必要的软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg install ca-certificates curl gnupg software-properties software-properties-common tar</span><br></pre></td></tr></table></figure><p>下载Docker安装脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br></pre></td></tr></table></figure><p>运行安装脚本以安装Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh get-docker.sh</span><br></pre></td></tr></table></figure><p>启动Docker服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/dockerd start</span><br></pre></td></tr></table></figure><p>验证安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><p>开机自启Docker服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/dockerd <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><p>（可选）移除安装脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm get-docker.sh</span><br></pre></td></tr></table></figure><p>安装docker compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">opkg install docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">openwrt,os,docker</summary>
    
    
    
    <category term="tools" scheme="https://macin.top/categories/tools/"/>
    
    <category term="docker" scheme="https://macin.top/categories/tools/docker/"/>
    
    <category term="os" scheme="https://macin.top/categories/os/"/>
    
    <category term="openwrt" scheme="https://macin.top/categories/os/openwrt/"/>
    
    
    <category term="docker" scheme="https://macin.top/tags/docker/"/>
    
    <category term="os" scheme="https://macin.top/tags/os/"/>
    
    <category term="openwrt" scheme="https://macin.top/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>windows设置网络是否IPv6访问优先</title>
    <link href="https://macin.top/posts/12b4b795/"/>
    <id>https://macin.top/posts/12b4b795/</id>
    <published>2025-01-08T10:44:23.000Z</published>
    <updated>2025-02-28T15:34:31.959Z</updated>
    
    <content type="html"><![CDATA[<p><strong>查询你的网络是否IPv6访问优先：</strong><a href="https://ipw.cn/ipv6/">IPv6地址查询 | IP查询(ipw.cn)</a></p><p>在Windows操作系统中，你可以通过以下步骤设置IPv4优先于IPv6进行访问：</p><p><strong>打开命令提示符</strong>：</p><p>点击“开始”菜单，搜索“cmd”或“命令提示符”，右键选择“以管理员身份运行”。</p><p><strong>查看当前优先级设置</strong>：</p><p>在命令提示符中输入以下命令并按回车：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv6 show prefixpolicies</span><br></pre></td></tr></table></figure><p>这将显示当前的前缀策略列表，包括每个策略的优先级、标签和前缀。</p><p><strong>修改优先级设置</strong>：</p><p>IPv4的优先级设置为高于IPv6</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv6 <span class="built_in">set</span> prefixpolicy ::ffff:0:0/96 100 4</span><br></pre></td></tr></table></figure><p>这条命令将IPv4的优先级设置为100，标签为4。</p><p>IPv6的优先级设置为高于IPv4</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv6 <span class="built_in">set</span> prefixpolicy ::/0 40 1</span><br></pre></td></tr></table></figure><p>这条命令将IPv6的优先级设置为40，标签为1。</p>]]></content>
    
    
    <summary type="html">ipv6,windows,os</summary>
    
    
    
    <category term="web" scheme="https://macin.top/categories/web/"/>
    
    <category term="domain" scheme="https://macin.top/categories/web/domain/"/>
    
    <category term="nginx" scheme="https://macin.top/categories/web/nginx/"/>
    
    <category term="lucky" scheme="https://macin.top/categories/web/lucky/"/>
    
    <category term="os," scheme="https://macin.top/categories/os/"/>
    
    <category term="windows" scheme="https://macin.top/categories/os/windows/"/>
    
    
    <category term="web" scheme="https://macin.top/tags/web/"/>
    
    <category term="os" scheme="https://macin.top/tags/os/"/>
    
    <category term="windows" scheme="https://macin.top/tags/windows/"/>
    
    <category term="nginx" scheme="https://macin.top/tags/nginx/"/>
    
    <category term="lucky" scheme="https://macin.top/tags/lucky/"/>
    
    <category term="domain" scheme="https://macin.top/tags/domain/"/>
    
    <category term="ipv6" scheme="https://macin.top/tags/ipv6/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu通知栏实时显示CPU,内存,网速</title>
    <link href="https://macin.top/posts/c524a054/"/>
    <id>https://macin.top/posts/c524a054/</id>
    <published>2025-01-06T11:01:29.000Z</published>
    <updated>2025-02-28T15:34:31.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、添加indicator-sysmonitor的下载源"><a href="#一、添加indicator-sysmonitor的下载源" class="headerlink" title="一、添加indicator-sysmonitor的下载源"></a>一、添加indicator-sysmonitor的下载源</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor -y</span><br></pre></td></tr></table></figure><h1 id="二、更新apt-get"><a href="#二、更新apt-get" class="headerlink" title="二、更新apt-get"></a>二、更新apt-get</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>或者： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor &amp;&amp; sudo apt update</span><br></pre></td></tr></table></figure><p><img src="/img/indicator-sysmonito/1.webp" alt="24.png"></p><h1 id="三、安装indicator-sysmonito"><a href="#三、安装indicator-sysmonito" class="headerlink" title="三、安装indicator-sysmonito"></a>三、安装indicator-sysmonito</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install indicator-sysmonitor</span><br></pre></td></tr></table></figure><p><img src="/img/indicator-sysmonito/2.webp" alt="25.png"></p><h1 id="四、启动"><a href="#四、启动" class="headerlink" title="四、启动"></a>四、启动</h1><p><img src="/img/indicator-sysmonito/3.webp" alt="微信图片_20220627170404.png"></p><p>这时候通知栏默认会显示cpu和<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>的实时数据<img src="/img/indicator-sysmonito/4.webp" alt="26.png"></p><p>配置：点一下通知栏内容，按如下提示操作</p><p><img src="/img/indicator-sysmonito/5.webp" alt="28.png"></p><p>开启开机自启动</p><p><img src="/img/indicator-sysmonito/6.webp" alt="29.png"></p><p>显示格式：<code>CPU : &#123;cpu&#125; 网速 : &#123;net&#125;</code></p><p><img src="/img/indicator-sysmonito/7.webp" alt="00.jpg"></p><p>其他配置可以自由发挥~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">网速 : &#123;net&#125;  CPU &#123;cpu&#125;  &#123;cputemp&#125;   |  MEM &#123;mem&#125;  |  SWAP &#123;swap&#125;  |  Net Speed Compact &#123;netcomp&#125;  |  Total Net Speed &#123;totalnet&#125;</span><br><span class="line"></span><br><span class="line">网速 : &#123;net&#125;  | CPU : &#123;cpu&#125;  &#123;cputemp&#125;   |  MEM &#123;mem&#125;  |  SWAP &#123;swap&#125;  |  N SC &#123;netcomp&#125;  |  TNS &#123;totalnet&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ubuntu,os,debian,kali,sysmonitor</summary>
    
    
    
    <category term="os" scheme="https://macin.top/categories/os/"/>
    
    <category term="kali" scheme="https://macin.top/categories/os/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/categories/os/ubuntu/"/>
    
    <category term="debian" scheme="https://macin.top/categories/os/debian/"/>
    
    
    <category term="os" scheme="https://macin.top/tags/os/"/>
    
    <category term="kali" scheme="https://macin.top/tags/kali/"/>
    
    <category term="ubuntu" scheme="https://macin.top/tags/ubuntu/"/>
    
    <category term="debian" scheme="https://macin.top/tags/debian/"/>
    
    <category term="linux" scheme="https://macin.top/tags/linux/"/>
    
    <category term="sysmonitor" scheme="https://macin.top/tags/sysmonitor/"/>
    
  </entry>
  
</feed>
